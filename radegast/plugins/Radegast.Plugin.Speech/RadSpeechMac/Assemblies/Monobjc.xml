<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/Users/laurent/Projects/Monobjc/dist/2.0/Monobjc</name>
    </assembly>
    <members>
        <member name="T:Monobjc.Bridge.Generators.CodeGenerationAttributes">
            <summary>
            Contains constants for dynamic code generation.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PUBLIC_STATIC_TYPE">
            <summary>
            Used to build a "public static" type, known as class type.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PUBLIC_TYPE">
            <summary>
            Used to build a "public" type, known as type.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PUBLIC_CONSTRUCTOR">
            <summary>
            Used to build a constructor.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.ACCESSOR_METHOD">
            <summary>
            Used to build a "public" method.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PUBLIC_METHOD">
            <summary>
            Used to build a "public" method.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PUBLIC_VIRTUAL_METHOD">
            <summary>
            Used to build a "public virtual" method.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PUBLIC_STATIC_METHOD">
            <summary>
            Used to build a "public static" method.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PUBLIC_STATIC_PINVOKE_METHOD">
            <summary>
            Used to build a "public static" method that will be bound to a P/Invoke call.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PUBLIC_NESTED_DELEGATE">
            <summary>
            Used to build "public" nested delegate.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PUBLIC_DELEGATE_METHOD">
            <summary>
            Used to build a delegate method.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PRIVATE_STATIC_METHOD">
            <summary>
            Used to build a "private static" method.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PRIVATE_STATIC_PINVOKE_METHOD">
            <summary>
            Used to build a "private static" method that will be bound to a P/Invoke call.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PRIVATE_STATIC_CONSTRUCTOR">
            <summary>
            Used to build a "private static" constructor.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationAttributes.PRIVATE_STATIC_FIELD">
            <summary>
            Used to build a "private static" field.
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Generators.CodeGenerationConstants">
            <summary>
            Contains all the constants used in generation.
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Generators.CodeGenerationInfos">
            <summary>
            Contains definitions of the fields and methods that can be used during dynamic code generation.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.INTPTR_ZERO">
            <summary>
            FieldInfo for <see cref="F:System.IntPtr.Zero" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.INTPTR_INT64">
            <summary>
            ConstructorInfo for <see cref="T:System.IntPtr" /> constructor.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.NATIVEMETHODS_GETINSTANCEVARIABLE">
            <summary>
            MethodInfo for <see cref="T:Monobjc.SafeNativeMethods" />.<see cref="M:Monobjc.SafeNativeMethods.object_getInstanceVariable(System.IntPtr,System.String,System.IntPtr)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.NATIVEMETHODS_SETINSTANCEVARIABLE">
            <summary>
            MethodInfo for <see cref="T:Monobjc.SafeNativeMethods" />.<see cref="M:Monobjc.SafeNativeMethods.object_setInstanceVariable(System.IntPtr,System.String,System.IntPtr)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.CLASS_GETCLASSFROMTYPE">
            <summary>
            MethodInfo for <see cref="T:Monobjc.Class" />.<see cref="M:Monobjc.Class.GetClassFromType(System.Type)" /> getter.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.IMANAGEDWRAPPER_GETNATIVEPOINTER">
            <summary>
            MethodInfo for <see cref="T:Monobjc.IManagedWrapper" />.<see cref="P:Monobjc.IManagedWrapper.NativePointer" /> getter.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.ID_GETNATIVEPOINTER">
            <summary>
            MethodInfo for <see cref="T:Monobjc.Id" />.<see cref="P:Monobjc.Id.NativePointer" /> getter.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.ID_SETNATIVEPOINTER">
            <summary>
            MethodInfo for <see cref="T:Monobjc.Id" />.<see cref="P:Monobjc.Id.NativePointer" /> setter.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.ID_CONSTRUCTOR_INTPTR">
            <summary>
            MethodInfo for <see cref="T:Monobjc.Id" />.<see cref="P:Monobjc.Id.NativePointer" /> getter.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.OBJECTIVECRUNTIME_GETINSTANCE">
            <summary>
            MethodInfo for <see cref="T:Monobjc.ObjectiveCRuntime" />.<see cref="!:ObjectiveCRuntime.GetInstance{TClass}(IntPtr)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.OBJECTIVECRUNTIME_SELECTOR">
            <summary>
            MethodInfo for <see cref="T:Monobjc.ObjectiveCRuntime" />.<see cref="M:Monobjc.ObjectiveCRuntime.Selector(System.String)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.OBJECTIVECRUNTIME_SENDMESSAGE_VOID_NOARGS">
            <summary>
            MethodInfo for <see cref="T:Monobjc.ObjectiveCRuntime" />.<see cref="M:Monobjc.ObjectiveCRuntime.SendMessage(Monobjc.IManagedWrapper,System.String)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.OBJECTIVECRUNTIME_SENDMESSAGE_VOID_ARGS">
            <summary>
            MethodInfo for <see cref="T:Monobjc.ObjectiveCRuntime" />.<see cref="M:Monobjc.ObjectiveCRuntime.SendMessage(Monobjc.IManagedWrapper,System.String,System.Object[])" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.OBJECTIVECRUNTIME_SENDMESSAGE_NOARGS_GENERIC">
            <summary>
            MethodInfo for <see cref="T:Monobjc.ObjectiveCRuntime" />.<see cref="!:ObjectiveCRuntime.SendMessage{TReturnType}(IManagedWrapper,string)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.OBJECTIVECRUNTIME_SENDMESSAGE_ARGS_GENERIC">
            <summary>
            MethodInfo for <see cref="T:Monobjc.ObjectiveCRuntime" />.<see cref="!:ObjectiveCRuntime.SendMessage{TReturnType}(IManagedWrapper,string,object[])" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.MARSHAL_ALLOCHGLOBAL">
            <summary>
            MethodInfo for <see cref="T:System.Runtime.InteropServices.Marshal" />.<see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.MARSHAL_FREEHGLOBAL">
            <summary>
            MethodInfo for <see cref="T:System.Runtime.InteropServices.Marshal" />.<see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.MARSHAL_GETDELEGATEFORFUNCTIONPOINTER">
            <summary>
            MethodInfo for <see cref="T:System.Runtime.InteropServices.Marshal" />.<see cref="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.MARSHAL_PTRTOSTRUCTURE">
            <summary>
            MethodInfo for <see cref="T:System.Runtime.InteropServices.Marshal" />.<see cref="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.MARSHAL_READINTPTR">
            <summary>
            MethodInfo for <see cref="T:System.Runtime.InteropServices.Marshal" />.<see cref="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.MARSHAL_SIZEOF">
            <summary>
            MethodInfo for <see cref="T:System.Runtime.InteropServices.Marshal" />.<see cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.MARSHAL_STRUCTURETOPTR">
            <summary>
            MethodInfo for <see cref="T:System.Runtime.InteropServices.Marshal" />.<see cref="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.MARSHAL_WRITEINT16">
            <summary>
            MethodInfo for <see cref="T:System.Runtime.InteropServices.Marshal" />.<see cref="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.MARSHAL_WRITEINT32">
            <summary>
            MethodInfo for <see cref="T:System.Runtime.InteropServices.Marshal" />.<see cref="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.MARSHAL_WRITEINT64">
            <summary>
            MethodInfo for <see cref="T:System.Runtime.InteropServices.Marshal" />.<see cref="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.MARSHAL_WRITEINTPTR">
            <summary>
            MethodInfo for <see cref="T:System.Runtime.InteropServices.Marshal" />.<see cref="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)" />.
            </summary>
        </member>
        <member name="F:Monobjc.Bridge.Generators.CodeGenerationInfos.TYPE_GETTYPEFROMHANDLE">
            <summary>
            MethodInfo for <see cref="T:System.Type" />.<see cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />.
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Generators.CodeGenerationUtils">
            <summary>
            Contains all the utility functions used in generation.
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Generators.CodeGenerator">
            <summary>
            A base type used for dynamic assembly generation.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.CodeGenerator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Bridge.Generators.CodeGenerator" /> class.
            </summary>
            <param name="assemblyName">Name of the dynamic assembly.</param>
            <param name="moduleName">Name of the dynamic module.</param>
        </member>
        <member name="P:Monobjc.Bridge.Generators.CodeGenerator.Assembly">
            <summary>
            Gets the assembly builder.
            </summary>
        </member>
        <member name="P:Monobjc.Bridge.Generators.CodeGenerator.Module">
            <summary>
            Gets the module builder.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.CodeGenerator.NeedWrapping(System.Type)">
            <summary>
            Tests to check whether a type needs a pointer wrapping.
            </summary>
            <param name="type">The type.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.Bridge.Generators.CodeGenerator.NeedWrapping(System.Type[])">
            <summary>
            Tests to check whether types need a pointer wrapping.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.CodeGenerator.Init">
            <summary>
            Init the dymaically generated DLL.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.CodeGenerator.Save">
            <summary>
            Save the dymaically generated DLL.
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Generators.DynamicMessagingGenerator">
            <summary>
            Dynamic code generator for the Objective-C messaging.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Bridge.Generators.MessagingGenerator" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.SendMessage(System.String,System.IntPtr,System.IntPtr,System.Object[])">
            <summary>
            Sends the message.
            </summary>
            <param name="message">The message.</param>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.SendMessage``1(System.String,System.IntPtr,System.IntPtr,System.Object[])">
            <summary>
            Sends the message.
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="message">The message.</param>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.DefineMessagingDelegate(System.String,System.String,System.Type[])">
            <summary>
                <para>Define a messaging method that have the following call stack:</para>
                <pre>
            - void objc_msgsend_XXXX(IntPtr receiver, IntPtr selector, Object[] parameters)
            - void __inner_call(IntPtr receiver, IntPtr selector, XXXX a);
            </pre>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.DefineMessagingDelegate``1(System.String,System.String,System.Type[])">
            <summary>
                <para>Define a messaging method that have the following call stack:</para>
                <pre>
            - TReturnType objc_msgsend_XXXX(IntPtr receiver, IntPtr selector, Object[] parameters)
            - TReturnType __inner_call(IntPtr receiver, IntPtr selector, XXXX a);
            </pre>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.EmitManagedToNativeParametersLoadOnStack(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>
            Emits the OpCodes for the parameter loading on the stack. Use first short OpCodes and then
            generic loading OpCodes.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.DefineCallMethod(System.Reflection.Emit.TypeBuilder,System.String,System.Type,System.Type[])">
            <summary>
            Defines the call method builder.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.DefineNativeCallMethod(System.Reflection.Emit.TypeBuilder,System.String,System.String,System.Type,System.Type[])">
            <summary>
            Defines the native call method. Each wrapped parameter will be replaced by an <see cref="T:System.IntPtr" />.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.MergeParametersVarArgs(System.IntPtr,System.Object[])">
            <summary>
                <para>Merge parameters, by flattening the var-args array.</para>
                <para>The last parameter passed must be an object array that contains a list of arguments.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.GetParametersTypes(System.Object[])">
            <summary>
                <para>Build an array of <see cref="T:System.Type" /> from the parameters.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.GetMessagingTypeName(System.String,System.Type,System.Type[])">
            <summary>
                <para>Computes the proxy name from the return type and the parameter types.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.GetMessagingSignature(System.String,System.Type,System.Type[])">
            <summary>
                <para>Builds the signature from the return type and the parameter types.</para>
                <para>This is for debugging purpose</para>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.SendMessage(System.String,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the message.
            </summary>
            <param name="message">The message.</param>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.SendMessage``1(System.String,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the message.
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="message">The message.</param>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.SendMessageVarArgs(System.String,System.IntPtr,System.IntPtr,System.Object[])">
            <summary>
            Sends the message with variable arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.Bridge.Generators.DynamicMessagingGenerator.SendMessageVarArgs``1(System.String,System.IntPtr,System.IntPtr,System.Object[])">
            <summary>
            Sends the message with variable arguments.
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="message">The message.</param>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result</returns>
        </member>
        <member name="T:Monobjc.Bridge.Generators.MessagingGenerator">
            <summary>
            Dynamic code generator for the Objective-C messaging.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.MessagingGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Bridge.Generators.MessagingGenerator" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.MessagingGenerator.DefineMessagingMethod(System.String,System.String,System.Type,System.Type[])">
            <summary>
            Create the proxy type with the P/Invoke definition that matches the return type and the parameter types.
            <para>There are five cases :</para><list type="number"><item>The return type is a managed wrapper (Id subclass)</item><item>The return type is a small structure (blittable in one CPU register)</item><item>The return type is a big structure</item><item>The return type is a floating point type (on x86 CPU)</item><item>The return type is directly blittable</item></list></summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.MessagingGenerator.EmitManagedToNativeParametersLoadOnStack(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>
            Emits the OpCodes for the parameter loading on the stack. Use first short OpCodes and then
            generic loading OpCodes.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.MessagingGenerator.MergeParameters(System.IntPtr,System.IntPtr,System.Object[])">
            <summary>
                <para>Merge parameters, by inserting the receiver and the selector before.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.MessagingGenerator.MergeParametersVarArgs(System.IntPtr,System.IntPtr,System.Object[])">
            <summary>
                <para>Merge parameters, by inserting the receiver and the selector before.</para>
                <para>The last parameter passed must be an object array that contains a list of arguments.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.MessagingGenerator.GetParametersTypes(System.Object[])">
            <summary>
                <para>Build an array of <see cref="T:System.Type" /> from the parameters.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.MessagingGenerator.GetMessagingTypeName(System.String,System.Type,System.Type[])">
            <summary>
                <para>Computes the proxy name from the return type and the parameter types.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.MessagingGenerator.SendMessage(System.String,System.IntPtr,System.IntPtr,System.Object[])">
            <summary>
            Sends the message.
            </summary>
            <param name="message">The message.</param>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.Bridge.Generators.MessagingGenerator.SendMessage``1(System.String,System.IntPtr,System.IntPtr,System.Object[])">
            <summary>
            Sends the message.
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="message">The message.</param>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.Bridge.Generators.MessagingGenerator.SendMessageVarArgs(System.String,System.IntPtr,System.IntPtr,System.Object[])">
            <summary>
            Sends the message.
            </summary>
            <param name="message">The message.</param>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.Bridge.Generators.MessagingGenerator.SendMessageVarArgs``1(System.String,System.IntPtr,System.IntPtr,System.Object[])">
            <summary>
            Sends the message.
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="message">The message.</param>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Monobjc.Bridge.Generators.ProxyGenerator">
            <summary>
            Dynamic code generator for the .NET/Objective-C proxies.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Bridge.Generators.ProxyGenerator" /> class.
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Generators.ProxyGenerator.MethodTuple">
            <summary>
            Holds the definition of a method (Mix of .NET/Objective-C).
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Generators.ProxyGenerator.VariableTuple">
            <summary>
            Holds the definition of an instance variable (Mix of .NET/Objective-C).
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.DefineDelegate(System.Reflection.Emit.TypeBuilder,Monobjc.Bridge.Generators.ProxyGenerator.MethodTuple)">
            <summary>
            Defines an inner Delegate type for the method to be invoked from Objective-C runtime.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.DefineProxyMethod(System.Reflection.Emit.TypeBuilder,Monobjc.Bridge.Generators.ProxyGenerator.MethodTuple,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Defines a proxy method that is called from Objective-C runtime. This method retrieves the targeted managed instance and passes the parameters.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.DefineImportMethod(System.Reflection.Emit.TypeBuilder,System.Type,System.Collections.Generic.ICollection{Monobjc.Bridge.Generators.ProxyGenerator.VariableTuple})">
            <summary>
            Defines a methods that will transfer instance variables from the Objective-C runtime to the .NET runtime.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.DefineExportMethod(System.Reflection.Emit.TypeBuilder,System.Type,System.Collections.Generic.ICollection{Monobjc.Bridge.Generators.ProxyGenerator.VariableTuple})">
            <summary>
            Defines a methods that will transfer instance variables from the .NET runtime to the Objective-C runtime.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.EmitByRefLocalVariables(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>
            Emit local variable for each by-ref parameters. These variables will hold the result until the marshalling occurs.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.EmitNativeToManagedParametersLoadOnStack(System.Reflection.Emit.ILGenerator,System.Collections.Generic.IDictionary{System.Int32,System.Reflection.Emit.LocalBuilder},System.Type[])">
            <summary>
            Genenerate optimized IL for stacking parameters :
            - For the third or fourth parameter, use the short OpCode
            - For all the parameters left, use the long OpCode
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.EmitByRefLocalVariablesMarshalling(System.Reflection.Emit.ILGenerator,System.Collections.Generic.IDictionary{System.Int32,System.Reflection.Emit.LocalBuilder})">
            <summary>
            Emit the code needed to marshal back the local variables to by-ref parameters.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.DefineNativeMethod(System.Type,Monobjc.Bridge.Generators.ProxyGenerator.MethodTuple)">
            <summary>
            Once the proxy method is defined, create a delegate from this method. The resulting delegate (and its
            underlying native pointer) will be used as the IMP value for the method.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.CollectInstanceVariables(System.Type,System.Collections.Generic.ICollection{Monobjc.Bridge.Generators.ProxyGenerator.VariableTuple})">
            <summary>
            Collect every public fields with an attribute. Traverse the hierachy to include parent's one.
            The import/export must contains all the fields.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.CollectInstanceMethods(System.Type,System.Collections.Generic.ICollection{Monobjc.Bridge.Generators.ProxyGenerator.MethodTuple})">
            <summary>
            Collect every public instance method with an attribute.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.CollectStaticMethods(System.Type,System.Collections.Generic.ICollection{Monobjc.Bridge.Generators.ProxyGenerator.MethodTuple})">
            <summary>
            Collect every public static method with an attribute.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.CollectConstructors(System.Type,System.Collections.Generic.ICollection{Monobjc.Bridge.Generators.ProxyGenerator.MethodTuple})">
            <summary>
            Collect every public constructor with an attribute.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.GetReturnType(System.Reflection.MethodBase)">
            <summary>
            Gets the return type of a method or a constructor.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.GetUniqueName(System.Reflection.MethodBase)">
            <summary>
            Generates a unique name for a method or a constructor.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.GetParametersTypes(System.Reflection.MethodBase)">
            <summary>
            Gets an array containing the types of a method or a constructor.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.CollectStructures(System.Type,System.Collections.Generic.List{Monobjc.Bridge.Generators.ProxyGenerator.VariableTuple},System.Collections.Generic.List{Monobjc.Bridge.Generators.ProxyGenerator.MethodTuple},System.Collections.Generic.List{Monobjc.Bridge.Generators.ProxyGenerator.MethodTuple})">
            <summary>
            Prepare the proxy creation
            - Collect instance variables
            - Collect instance methods
            - Collect constructors
            - Collect static methods
            </summary>
            <param name="type">The type.</param>
            <param name="variableTuples">The variable tuples.</param>
            <param name="instanceTuples">The instance tuples.</param>
            <param name="classTuples">The class tuples.</param>
        </member>
        <member name="M:Monobjc.Bridge.Generators.ProxyGenerator.CreateProxy(System.Type,System.Collections.Generic.List{Monobjc.Bridge.Generators.ProxyGenerator.VariableTuple},System.Collections.Generic.List{Monobjc.Bridge.Generators.ProxyGenerator.MethodTuple},System.Collections.Generic.List{Monobjc.Bridge.Generators.ProxyGenerator.MethodTuple})">
            <summary>
            Entry point for creating proxy.
            - Create a proxy type
            - Create import/export methods for instance variables
            - Create a proxy method and a delegate for each instance method
            - Create a proxy method and a delegate for each constructor
            - Create a proxy method and a delegate for each static method
            - Finalize the proxy type
            - Fill in list of objc_method with instance method
            - Fill in list of objc_method with constructors and static method
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Generators.WrapperGenerator">
            <summary>
            Dynamic code generator for the .NET/Objective-C protocol proxies.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.WrapperGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Bridge.Generators.ProxyGenerator" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.WrapperGenerator.GetParameterTypes(System.Reflection.MethodInfo)">
            <summary>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.WrapperGenerator.EmitMethodBody(System.Reflection.Emit.MethodBuilder,System.Reflection.MethodInfo,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.WrapperGenerator.EmitParametersAsArrayOnStack(System.Reflection.Emit.ILGenerator,System.Reflection.ParameterInfo[])">
            <summary>
            Create an object array and put the method arguments in it, then load the array on the stack
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Generators.WrapperGenerator.GetWrapper``1">
            <summary>
                <para>Entry point for creating protocol wrapper.</para>
                <para>The given type must:
            <list type="bullet"><item>be an interface (defining a protocol for example)</item><item>be tagged with the <see cref="T:Monobjc.ObjectiveCProtocolAttribute" /> attribute</item><item>contains methods tagged with a <see cref="T:Monobjc.ObjectiveCMessageAttribute" /> attribute</item><item>implements IManagedWrapper interface</item></list></para>
            </summary>
            <exception cref="T:System.ArgumentNullException">If the type is null</exception>
            <exception cref="T:System.ArgumentException">If the type is not an interface, if the type does not inherits from <see cref="T:Monobjc.IManagedWrapper" /> or if the type has no <see cref="T:Monobjc.ObjectiveCProtocolAttribute" /> attribute.</exception>
        </member>
        <member name="M:Monobjc.Bridge.Loaders.CodeLoader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Bridge.Loaders.CodeLoader" /> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="moduleName">Name of the module.</param>
        </member>
        <member name="P:Monobjc.Bridge.Loaders.CodeLoader.Assembly">
            <summary>
            Gets the assembly.
            </summary>
        </member>
        <member name="P:Monobjc.Bridge.Loaders.CodeLoader.Module">
            <summary>
            Gets the module.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Loaders.CodeLoader.Init">
            <summary>
            Load the assmebly from disk.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Loaders.CodeLoader.Save">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Loaders.WrapperLoader">
            <summary>
            Wrapper provider for the .NET/Objective-C protocol proxies.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Loaders.WrapperLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Bridge.Loaders.WrapperLoader" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Loaders.WrapperLoader.Init">
            <summary>
            Load the assmebly from disk and populate the wrapper cache.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.Loaders.WrapperLoader.GetWrapper``1">
            <summary>
            Gets the wrapper for the given protocol class.
            </summary>
            <typeparam name="TClass">The protocol class.</typeparam>
            <returns>A managed wrapper class</returns>
        </member>
        <member name="T:Monobjc.Bridge.IBridgeProvider">
            <summary>
            Bridge provider for the .NET/Objective-C protocol proxies.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.IBridgeProvider.Init">
            <summary>
            When implemented, initialize the content for this provider.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.IBridgeProvider.Save">
            <summary>
            When implemented, save the content of the provider.
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.IWrapperProvider">
            <summary>
            Wrapper provider for the .NET/Objective-C protocol proxies.
            </summary>
        </member>
        <member name="M:Monobjc.Bridge.IWrapperProvider.GetWrapper``1">
            <summary>
            Gets the wrapper for the given protocol class.
            </summary>
            <typeparam name="TClass">The protocol class.</typeparam>
            <returns>A managed wrapper class</returns>
        </member>
        <member name="T:Monobjc.Properties.Resources">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.ResourceManager">
            <summary>
            Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.Culture">
            <summary>
            Overrides the current thread's CurrentUICulture property for all
            resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.ArchitectureNotSupported">
            <summary>
            Looks up a localized string similar to The architecture '{0}' is not supported.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.ArchitectureNotTested">
            <summary>
            Looks up a localized string similar to This architecture '{0}' has not been tested.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.CannotCallVarargsMessage">
            <summary>
            Looks up a localized string similar to Cannot call the varargs message '{0}' without a valid parameter list..
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.CannotCreateInstance">
            <summary>
            Looks up a localized string similar to Cannot create an instance of '{0}'.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.CannotDefineClassBecauseSuperclassDoesNotExists">
            <summary>
            Looks up a localized string similar to Cannot define class '{0}' because the superclass '{1}' does not exists.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.CannotDefineObjectiveCClassFromNullType">
            <summary>
            Looks up a localized string similar to Cannot define an Objective-C class wrapper from a null type.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.CannotGenerateCodeExportFieldNotSupported">
            <summary>
            Looks up a localized string similar to Cannot generate code to export field of type '{0}' as it is not supported.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.CannotGenerateCodeImportFieldNotSupported">
            <summary>
            Looks up a localized string similar to Cannot generate code to import field of type '{0}' as it is not supported.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.CannotGenerateCodeSmallStructureNotHandled">
            <summary>
            Looks up a localized string similar to Cannot generate code for small structure of type '{0}' as it is not handled.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.CannotLocateFrameworkInStandardLocations">
            <summary>
            Looks up a localized string similar to Cannot locate the '{0}' framework in the standard locations. Check your framework search path..
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.CannotMapTheSameClassTwice">
            <summary>
            Looks up a localized string similar to Cannot map the '{0}' class twice.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.CannotSafelyCastObject">
            <summary>
            Looks up a localized string similar to Cannot safely cast cached object. The cache contains an instance of class '{0}' and the class '{0}' is not assignable to the class linked to '{1}'. The class hierarchy of the cache instance is: {2}..
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.ClassPointerCannotBeSetToZero">
            <summary>
            Looks up a localized string similar to A native class pointer cannot set to zero.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.DynamicLibraryCannotBeLoaded">
            <summary>
            Looks up a localized string similar to The '{0}' dynamic library cannot be loaded. Dynamic loader says: '{1}'..
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.ExposedTypeMustHaveAConstructorWithIntPtrParameter">
            <summary>
            Looks up a localized string similar to Type '{0}' must have a constructor that takes an IntPtr parameter.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.ExposedTypeMustHaveADefaultConstructor">
            <summary>
            Looks up a localized string similar to Type '{0}' must have a default constructor.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.FailedToAddIvarToClass">
            <summary>
            Looks up a localized string similar to Failed to add ivar '{0}' to class '{1}' (we are defining a class from '{2}'.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.FailedToClassMethodToClass">
            <summary>
            Looks up a localized string similar to Failed to class method '{0}' to class '{1}' (we are defining a class from '{2}'.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.FailedToInstanceMethodToClass">
            <summary>
            Looks up a localized string similar to Failed to instance method '{0}' to class '{1}' (we are defining a class from '{2}'.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.InvalidBaseImplementationMethodPointer">
            <summary>
            Looks up a localized string similar to Trying to get a base implementation method pointer for class '{0}' and selector '{1}'. Only imposter class can call this method !!!.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.MacOSXVersionNotSupported">
            <summary>
            Looks up a localized string similar to Mac OS X version '{0}' is not supported.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.NativePointerCannotBeSetToZero">
            <summary>
            Looks up a localized string similar to A native pointer cannot be set to zero.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.NoClassAttributeFoundForBaseType">
            <summary>
            Looks up a localized string similar to No ObjectiveCClass attribute found for the base type of '{0}'.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.NoClassAttributeFoundForType">
            <summary>
            Looks up a localized string similar to No ObjectiveCClass attribute found for type '{0}'.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.ObjectiveCClassString">
            <summary>
            Looks up a localized string similar to ObjectiveCClass[Name = '{0}', InterceptCallsFor = '{1}'].
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.ObjectiveCFieldString">
            <summary>
            Looks up a localized string similar to ObjectiveCFieldAttribute[Name = '{0}', Type = '{1}', Size = '{2}'].
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.ObjectiveCMessageString">
            <summary>
            Looks up a localized string similar to ObjectiveCMessageAttribute[Selector = '{0}', Signature = '{1}', SynchronizeFields = '{2}'].
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.ObjectiveCProtocolString">
            <summary>
            Looks up a localized string similar to ObjectiveCProtocolAttribute[Name = '{0}'].
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.TheMethodOfTypeHasAnInvalidObjectiveCMessageAttribute">
            <summary>
            Looks up a localized string similar to The method '{0}' of type '{1}' has an ObjectiveCMessage attribute without valid selector value.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.TheMethodOfTypeHasNotObjectiveCMessageAttribute">
            <summary>
            Looks up a localized string similar to The method '{0}' of type '{1}' has not ObjectiveCMessage attrbiute.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.TypeDoesNotInheritsFromIManagedWrapper">
            <summary>
            Looks up a localized string similar to Type '{0}' does not inherit from IManagedWrapper.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.TypeHasNoObjectiveCProtocolAttribute">
            <summary>
            Looks up a localized string similar to Type '{0}' has no ObjectiveCProtocol attribute.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.TypeIsNotAnInterface">
            <summary>
            Looks up a localized string similar to Type '{0}' is not an interface.
            </summary>
        </member>
        <member name="P:Monobjc.Properties.Resources.ValueMustBeGreaterThanZero">
            <summary>
            Looks up a localized string similar to Field size for ObjectiveCField attribute must be greater than zero.
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.ARM.ARMCallingConventions">
            <summary>
            ARM conventions.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.ARM.ARMCallingConventions.IsBigEndian">
            <summary>
            Gets a value indicating whether this architecture has a big-endian byte ordering.
            </summary>
            <value>
                <c>true</c> if this architecture has big-endian byte ordering; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Monobjc.Runtime.ARM.ARMCallingConventions.Is64Bits">
            <summary>
            Gets a value indicating whether this architecture is a 64 bits one.
            </summary>
            <value>
                <c>true</c> if this architecture is a 64 bits one; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Monobjc.Runtime.ARM.ARMCallingConventions.AllowDynamicCode">
            <summary>
            Gets a value indicating whether dynamic code generation is allowed.
            </summary>
            <value>
                <c>true</c> if dynamic code generation is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Monobjc.Runtime.ARM.ARMCallingConventions.IsFloatingType(System.Type)">
            <summary>
            Determines whether the specified type must be treated as a floating type.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type must be treated as a floating type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.ARM.ARMCallingConventions.IsSmallStructure(System.Type)">
            <summary>
            Determines whether the specified type is a small structure, which means that it can be marshalled directly through processor registers.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type is a small structure; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Monobjc.Runtime.ObjectiveC10.InfoMasks">
            <summary>
                <para>A set of bit flags used by the Objective-C runtime functions.</para>
            </summary>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_CLASS">
            <summary>
            The CLS_CLASS (0x1) flag indicates that this definition represents a class, which contains instance methods and variable definitions that are allocated for each new instance of the class.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_META">
            <summary>
            The CLS_META (0x2) flag indicates that this class definition represents a metaclass, which contains the list of methods that are not specific to any one instance of the class (class methods).
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_INITIALIZED">
            <summary>
            The CLS_INITIALIZED (0x4) flag indicates that the runtime has initialized this class. This flag should be set only by the objc_addClass function.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_POSING">
            <summary>
            The CLS_POSING (0x8) flag indicates that this class is posing as another class.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_MAPPED">
            <summary>
            The CLS_MAPPED (0x10) flag is used internally by the Objective-C runtime.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_FLUSH_CACHE">
            <summary>
            The CLS_FLUSH_CACHE (0x20) flag is used internally by the Objective-C runtime.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_GROW_CACHE">
            <summary>
            The CLS_GROW_CACHE ( 0x40) flag is used internally by the Objective-C runtime.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_NEED_BIND">
            <summary>
            The CLS_NEED_BIND (0x80) flag is used internally by the Objective-C runtime.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_METHOD_ARRAY">
            <summary>
            The CLS_METHOD_ARRAY (0x100) flag indicates that the methodLists field is an array of pointers to objc_method_list data structures rather than a pointer to a single objc_method_list data structure.
            <remarks>This flag is currently unused in the runtime (cf. runtime/objc-class.m source file). Use <see cref="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_NO_METHOD_ARRAY" /> flag instead.</remarks></summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_JAVA_HYBRID">
            <summary>
            The JavaBridge constructs classes with this marker.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_JAVA_CLASS">
            <summary>
            The JavaBridge constructs classes with this marker.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_INITIALIZING">
            <summary>
            The CLS_INITIALIZING (0x0800) flag indicates that the +initialize method is thread-safe.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_FROM_BUNDLE">
            <summary>
            The CLS_FROM_BUNDLE (0x1000) flag indicates that the class supports bundle unloading.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_HAS_CXX_STRUCTORS">
            <summary>
            The CLS_HAS_CXX_STRUCTORS (0x2000) flag indicates that the class has C++ ivars.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_NO_METHOD_ARRAY">
            <summary>
            The CLS_HAS_CXX_STRUCTORS (0x4000) flag indicates that the methods are not defined with an array.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.InfoMasks.CLS_HAS_LOAD_METHOD">
            <summary>
            The CLS_HAS_LOAD_METHOD (0x8000) flag indicates that the class has a +load method.
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.ObjectiveC10.NativeMethods">
            <summary>
                <para>Exports native methods exposed in <c>libobjc.dylib</c> shared library.</para>
                <para>Thanks to .NET P/Invoke system, most of the marshalling work is automatic.</para>
                <para>These methods are specific to Mac OS X 10.4.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.NativeMethods.class_addMethods(System.IntPtr,System.IntPtr)">
            <summary>
                <para>Adds a list of methods to a class definition.</para>
                <para>All the methods in the specified method list must be mapped to valid selectors before they can be added to the class. You can use the sel_registerName function to perform this operation.</para>
                <para>After you call class_addMethods, the class definition contains the pointer to the method list data structure that you passed in. You cannot release the memory occupied by this data structure until you have removed the methods from the class definition using the class_removeMethods function.</para>
                <para>The original declaration is :
            <code>
            void class_addMethods(Class aClass, struct objc_method_list* methodList)
            </code></para>
            </summary>
            <param name="aClass">A pointer to an objc_class data structure. To add instance methods, pass the class definition to which you wish to add the methods. To add class methods, pass the metaclass (aClass-&gt;isa instead of aClass).</param>
            <param name="methodList">A pointer to an objc_method_list data structure containing an array of methods to add to the specified class definition.</param>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.NativeMethods.class_poseAs(System.IntPtr,System.IntPtr)">
            <summary>
                <para>Globally override a specified class definition with a different class definition.</para>
                <para>You can use this function to globally override the definition of a class with an immediate subclass. Whenever a request is made of the original class, the imposter class is substituted as the receiver.</para>
                <para>Generally, this function is called by the poseAs: method of the NSObject class, so you should never need to call it yourself.</para>
                <para>The original declaration is :
            <code>
            Class class_poseAs(Class imposter, Class original);
            </code></para>
            </summary>
            <param name="imposter">A pointer to an objc_class data structure. Pass the class definition that replaces the original. The imposter class definition must be an immediate subclass of the original (that is, (imposter-&gt;super_class == original) must be a true statement), and the imposter must not contain instance variables (imposter-&gt;ivars must be NULL.)</param>
            <param name="original">A pointer to an objc_class data structure. Pass the class definition you wish to override.</param>
            <returns>
            </returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.NativeMethods.objc_addClass(System.IntPtr)">
            <summary>
                <para>Registers a class definition with the Objective-C runtime.</para>
                <para>Be sure that you have already set up the class definition correctly, with appropriate links to its metaclass definition and to the definition of its superclass. Listing 2 demonstrates how to properly create and add a class to the Objective-C runtime. Once a class is registered, you can get a pointer to the objc_class data structure of this class using the Foundation framework function NSClassFromString.</para>
                <para>The original declaration is :
            <code>
            void objc_addClass(Class myClass);
            </code></para>
            </summary>
            <param name="myClass">A pointer to an objc_class data structure. Pass the class definition you wish to register.</param>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="T:Monobjc.Runtime.ObjectiveC10.ObjectiveC10Bridge">
            <summary>
            A <see cref="T:Monobjc.Runtime.RuntimeBridge" /> implementation that is targeted on Mac OS X 10.4/Objective-C 1.0.
            </summary>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.ObjectiveC10Bridge.GetClassName(System.IntPtr)">
            <summary>
            Gets the name of the class.
            </summary>
            <param name="nativePointer">A pointer to a class structure (opaque or not).</param>
            <returns>The class name</returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.ObjectiveC10Bridge.GetSuperClass(System.IntPtr)">
            <summary>
            Gets a pointer to the super class structure (opaque or not).
            </summary>
            <param name="nativePointer">A pointer to a class structure (opaque or not).</param>
            <returns>
            A pointer to a class structure (opaque or not).
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.ObjectiveC10Bridge.DefineClass(Monobjc.Bridge.Generators.ProxyGenerator,System.Type)">
            <summary>
            Defines the class, by using various attributes.
            </summary>
            <param name="generator">The dynamic proxy generator.</param>
            <param name="type">The type that contains the definition attibutes.</param>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.ObjectiveC10Bridge.GetRootClass(Monobjc.Runtime.ObjectiveC10.objc_class)">
            <summary>
            Climb up the class hierarchy to find out the root class.
            </summary>
            <param name="classStruct">The class struct.</param>
            <returns>The class at the top of the hierarchy</returns>
        </member>
        <member name="T:Monobjc.Runtime.ObjectiveC10.objc_class">
            <summary>
                <para>Defines an Objective-C class.</para>
                <para>The compiler generates two <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_class" /> data structures for each class defined in your source code: one for the class definition and one for the metaclass definition. You can create class definitions at runtime by creating these data structures and calling the <see cref="M:Monobjc.Runtime.ObjectiveC10.NativeMethods.objc_addClass(System.IntPtr)" /> function.</para>
                <para>The Objective-C declaration is :
            <code>
            struct objc_class
            {
            struct objc_class* isa;
            struct objc_class* super_class;
            const char* name;
            long version;
            long info;
            long instance_size;
            struct objc_ivar_list* ivars;
            struct objc_method_list** methodLists;
            struct objc_cache* cache;
            struct objc_protocol_list* protocols;
            };
            </code></para>
            </summary>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_class.isa">
            <summary>
            Points to the metaclass of this class. If this class is a metaclass, the isa field points to the root metaclass (usually the metaclass for NSObject, but also possibly the metaclass for NSProxy or a root class of your own�a root class is any class that does not inherit from another class). This also means that the isa field for the metaclass of the root class points to itself.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_class.super_class">
            <summary>
            Points to the <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_class" /> data structure for the superclass of this class, or NULL if this is a root class.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_class.name">
            <summary>
            Points to a C string containing the name of the class.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_class.version">
            <summary>
            An integer indicating the version number of the class, which you can modify at runtime using the class_setVersion function. The compiler initially defines the version field as 0.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_class.info">
            <summary>
            Contains a set of bit flags used by the Objective-C runtime functions. You can manipulate them using the following masks:
            <list type="bullet"><item>The CLS_CLASS (0x1L) flag indicates that this definition represents a class, which contains instance methods and variable definitions that are allocated for each new instance of the class.</item><item>The CLS_META (0x2L) flag indicates that this class definition represents a metaclass, which contains the list of methods that are not specific to any one instance of the class (class methods).</item><item>The CLS_INITIALIZED (0x4L) flag indicates that the runtime has initialized this class. This flag should be set only by the objc_addClass function.</item><item>The CLS_POSING (0x8L) flag indicates that this class is posing as another class.</item><item>The CLS_MAPPED (0x10L) flag is used internally by the Objective-C runtime.</item><item>The CLS_FLUSH_CACHE (0x20L) flag is used internally by the Objective-C runtime.</item><item>The CLS_GROW_CACHE ( 0x40L) flag is used internally by the Objective-C runtime.</item><item>The CLS_NEED_BIND (0x80L) flag is used internally by the Objective-C runtime.</item><item>The CLS_METHOD_ARRAY (0x100L) flag indicates that the methodLists field is an array of pointers to objc_method_list data structures rather than a pointer to a single objc_method_list data structure.</item></list></summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_class.instance_size">
            <summary>
            An integer indicating the size of the instance variables used by this class. This value includes the value of the instance_size field of the superclass.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_class.ivars">
            <summary>
            A pointer to an objc_ivar_list data structure describing the instance variables that are allocated for each instance of this class. This pointer may be NULL, in which case this class has no instance variables.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_class.methodLists">
            <summary>
            If the CLS_METHOD_ARRAY flag is set, this field is an array of objc_method_list data structures that collectively specify all the instance methods that can be sent to objects that are instances of this class. If the CLS_METHOD_ARRAY flag is not set, this field is a pointer to a single objc_method_list data structure. If this class is a metaclass definition, this field specifies the class methods of the class.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_class.cache">
            <summary>
            A pointer to an objc_cache method cache data structure.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_class.protocols">
            <summary>
            A pointer to a objc_protocol_list data structure. This is a list of the formal protocols this class claims to implement.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.ObjectiveC10.objc_class.Size">
            <summary>
            Gets the size of this structure.
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_class.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_class" />.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_class.PtrToStructure(System.IntPtr)">
            <summary>
            Marshal a native pointer to an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_class" /> structure.
            </summary>
            <param name="pointer">The pointer to the native structure.</param>
            <returns>A <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_class" /> structure.</returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_class.StructureToPtr(Monobjc.Runtime.ObjectiveC10.objc_class)">
            <summary>
            Marshal an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_class" /> structure to a native pointer.
            </summary>
            <param name="structure">The <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_class" /> structure to marshal.</param>
            <returns>A pointer to the native structure.</returns>
            <remarks>Caller is responsible for freeing the allocated block of unmanaged memory.</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_class.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.ObjectiveC10.objc_ivar">
            <summary>
                <para>Specifies the name, type, and location of one instance variable.</para>
                <para>The <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_ivar_list" /> data structure contains an array of <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_ivar" /> elements, each of which indicates the name, type, and location of one instance variable.</para>
                <para>The Objective-C declaration is :
            <code>
            typedef struct objc_ivar *Ivar;
            struct objc_ivar
            {
            char* ivar_name;
            char* ivar_type;
            int ivar_offset;
            };
            </code></para>
            </summary>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_ivar.ivar_name">
            <summary>
            A pointer to a C string containing the name of the instance variable.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_ivar.ivar_type">
            <summary>
            A pointer to a C string containing the type encoding of the variable. See "Type Encodings" for valid type encodings for instance variables.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_ivar.ivar_offset">
            <summary>
            An integer indicating the location of this instance variable within the memory allocated for an instance of the class containing this variable. The offset is from the start of the instance memory to the location of this variable.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.ObjectiveC10.objc_ivar.Size">
            <summary>
            Gets the size of this structure.
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_ivar.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_ivar" />.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_ivar.PtrToStructure(System.IntPtr)">
            <summary>
            Marshal a native pointer to an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_ivar" /> structure.
            </summary>
            <param name="pointer">The pointer to the native structure.</param>
            <returns>A <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_ivar" /> structure.</returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_ivar.StructureToPtr(Monobjc.Runtime.ObjectiveC10.objc_ivar)">
            <summary>
            Marshal an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_ivar" /> structure to a native pointer.
            </summary>
            <param name="structure">The <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_ivar" /> structure to marshal.</param>
            <returns>A pointer to the native structure.</returns>
            <remarks>Caller is responsible for freeing the allocated block of unmanaged memory.</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_ivar.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.ObjectiveC10.objc_ivar_list">
            <summary>
                <para>Specifies the instance variables of each instance of a class.</para>
                <para>This data structure contains an array with of objc_ivar elements, each of which indicates the name, type, and location of one instance variable.</para>
                <para>The Objective-C declaration is :
            <code>
            struct objc_ivar_list
            {
            int ivar_count;
            struct objc_ivar ivar_list[1];
            };
            </code></para>
            </summary>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_ivar_list.count">
            <summary>
            An integer specifying a the number of elements in the ivar_list array.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.ObjectiveC10.objc_ivar_list.Size">
            <summary>
            Gets the size of this structure.
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_ivar_list.PtrToStructure(System.IntPtr)">
            <summary>
            Marshal a native pointer to an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_ivar_list" /> structure.
            </summary>
            <param name="pointer">The pointer to the native structure.</param>
            <returns>A <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_ivar_list" /> structure.</returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_ivar_list.StructureToPtr(Monobjc.Runtime.ObjectiveC10.objc_ivar_list)">
            <summary>
            Marshal an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_ivar_list" /> structure to a native pointer.
            </summary>
            <param name="structure">The <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_ivar_list" /> structure to marshal.</param>
            <returns>A pointer to the native structure.</returns>
            <remarks>Caller is responsible for freeing the allocated block of unmanaged memory.</remarks>
        </member>
        <member name="T:Monobjc.Runtime.ObjectiveC10.objc_method">
            <summary>
                <para>Represents a method in a class definition.</para>
                <para>The compiler generates the method type encodings in a format that includes information on the size of the stack and the size occupied by the arguments. These numbers appear after each encoding in the method_types string. However, because the compiler historically generates them incorrectly, and because they differ depending on the CPU type, the runtime ignores them if they are present. These numbers are not required by the Objective-C runtime in Mac OS X v10.0 or later.</para>
                <para>The Objective-C declaration is :
            <code>
            struct objc_method
            {
            SEL method_name;
            char * method_types;
            IMP method_imp;
            };
            </code></para>
            </summary>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_method.method_name">
            <summary>
            A pointer of type SEL. Points to the method selector that uniquely identifies the name of this method.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_method.method_types">
            <summary>
            A pointer to a C string. This string contains the type encodings for the method�s argument. See �Type Encodings� for information on valid encoding formats.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_method.method_imp">
            <summary>
            A pointer to the start of the method implementation. In a class definition that represents a formal protocol, this field is NULL.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.ObjectiveC10.objc_method.Size">
            <summary>
            Gets the size of this structure.
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_method.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_method" />.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_method.PtrToStructure(System.IntPtr)">
            <summary>
            Marshal a native pointer to an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_method" /> structure.
            </summary>
            <param name="pointer">The pointer to the native structure.</param>
            <returns>A <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_method" /> structure.</returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_method.StructureToPtr(Monobjc.Runtime.ObjectiveC10.objc_method)">
            <summary>
            Marshal an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_method" /> structure to a native pointer.
            </summary>
            <param name="structure">The <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_method" /> structure to marshal.</param>
            <returns>A pointer to the native structure.</returns>
            <remarks>Caller is responsible for freeing the allocated block of unmanaged memory.</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_method.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.ObjectiveC10.objc_method_list">
            <summary>
                <para>Contains an array of method definitions.</para>
                <para>The Objective-C declaration is :
            <code>
            struct objc_method_list
            {
            struct objc_method_list *obsolete;
            int method_count;
            struct objc_method method_list[1];
            }
            </code></para>
            </summary>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_method_list.obsolete">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_method_list.method_count">
            <summary>
            An integer specifying the number of methods in the method list array.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.ObjectiveC10.objc_method_list.Size">
            <summary>
            Gets the size of this structure.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Monobjc.Runtime.ObjectiveC10.objc_method_list.END_OF_METHODS_LIST">
            <summary>
            Gets the END_OF_METHODS_LIST constant used to terminate an array of objc_method_list when defining a class.
            <para>The caller must free the native memory block allocated if needed.</para></summary>
            <value>The END_OF_METHODS_LIST value.</value>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_method_list.PtrToStructure(System.IntPtr)">
            <summary>
            Marshal a native pointer to an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_method_list" /> structure.
            </summary>
            <param name="pointer">The pointer to the native structure.</param>
            <returns>A <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_method_list" /> structure.</returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_method_list.StructureToPtr(Monobjc.Runtime.ObjectiveC10.objc_method_list)">
            <summary>
            Marshal an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_method_list" /> structure to a native pointer.
            </summary>
            <param name="structure">The <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_method_list" /> structure to marshal.</param>
            <returns>A pointer to the native structure.</returns>
            <remarks>Caller is responsible for freeing the allocated block of unmanaged memory.</remarks>
        </member>
        <member name="T:Monobjc.Runtime.ObjectiveC10.objc_protocol_list">
            <summary>
                <para>Represents a list of formal protocols.</para>
                <para>A formal protocol is a class definition that declares a set of methods, which a class must implement. Such a class definition contains no instance variables. A class definition may promise to implement any number of formal protocols.</para>
                <para>The Objective-C declaration is :
            <code>
            struct objc_protocol_list
            {
            struct objc_protocol_list *next;
            int count;
            Protocol *list[1];
            };
            </code></para>
            </summary>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_protocol_list.next">
            <summary>
            A pointer to another <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_protocol_list" /> data structure.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.ObjectiveC10.objc_protocol_list.count">
            <summary>
            The number of protocols in this list.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.ObjectiveC10.objc_protocol_list.Size">
            <summary>
            Gets the size of this structure.
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_protocol_list.PtrToStructure(System.IntPtr)">
            <summary>
            Marshal a native pointer to an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_protocol_list" /> structure.
            </summary>
            <param name="pointer">The pointer to the native structure.</param>
            <returns>A <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_protocol_list" /> structure.</returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC10.objc_protocol_list.StructureToPtr(Monobjc.Runtime.ObjectiveC10.objc_protocol_list)">
            <summary>
            Marshal an <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_protocol_list" /> structure to a native pointer.
            </summary>
            <param name="structure">The <see cref="T:Monobjc.Runtime.ObjectiveC10.objc_protocol_list" /> structure to marshal.</param>
            <returns>A pointer to the native structure.</returns>
            <remarks>Caller is responsible for freeing the allocated block of unmanaged memory.</remarks>
        </member>
        <member name="T:Monobjc.Runtime.ObjectiveC20.NativeMethods">
            <summary>
                <para>Exports native methods exposed in <c>libobjc.dylib</c> shared library.</para>
                <para>Thanks to .NET P/Invoke system, most of the marshalling work is automatic.</para>
                <para>These methods are specific to Mac OS X 10.5.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.class_addIvar(System.IntPtr,System.String,System.Int32,System.Int32,System.String)">
            <summary>
                <para>Adds a new instance variable to a class.</para>
                <para>This function may only be called after <see cref="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.objc_allocateClassPair(System.IntPtr,System.String,System.Int32)" /> and before <see cref="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.objc_registerClassPair(System.IntPtr)" />. Adding an instance variable to an existing class is not supported.</para>
                <para>The class must not be a metaclass. Adding an instance variable to a metaclass is not supported.</para>
                <para>The instance variable's minimum alignment in bytes is 1&lt;&lt;align. The minimum alignment of an instance variable depends on the ivar's type and the machine architecture. For variables of any pointer type, pass log2(sizeof(pointer_type)).</para>
                <para>The original declaration is :
            <code>
            BOOL class_addIvar(Class cls, const char *name, size_t size, uint8_t alignment, const char *types)
            </code></para>
            </summary>
            <param name="cls">The class to which to add a variable.</param>
            <param name="name">The name.</param>
            <param name="size">The size.</param>
            <param name="alignment">The alignment.</param>
            <param name="types">The types.</param>
            <returns>
            YES if the variable was added successfully, otherwise NO (for example, the class already contains an instance variable with that name).
            </returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.class_addMethod(System.IntPtr,System.IntPtr,System.Delegate,System.String)">
            <summary>
                <para>Adds a new method to a class with a given name and implementation.</para>
                <para>
                    <see cref="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.class_addMethod(System.IntPtr,System.IntPtr,System.Delegate,System.String)" /> will add an override of a superclass's implementation, but will not replace an existing implementation in this class. To change an existing implementation, use method_setImplementation.</para>
                <para>An Objective-C method is simply a C function that take at least two arguments�self and _cmd. For example, given the following function:
            <code>
            void myMethodIMP(id self, SEL _cmd)
            {
            // implementation ....
            }
            </code>
            you can dynamically add it to a class as a method (called resolveThisMethodDynamically) like this:
            <code>
            class_addMethod([self class], @selector(resolveThisMethodDynamically), (IMP) myMethodIMP, "v@:");
            </code></para>
                <para>The original declaration is :
            <code>
            BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
            </code></para>
            </summary>
            <param name="cls">The class to which to add a method.</param>
            <param name="name">A selector that specifies the name of the method being added.</param>
            <param name="imp">A function which is the implementation of the new method. The function must take at least two arguments�self and _cmd.</param>
            <param name="types">An array of characters that describe the types of the arguments to the method. For possible values, see The Objective-C 2.0 Programming Language &gt; The Runtime System &gt; �Type Encodings�. Since the function must take at least two arguments�self and _cmd, the second and third characters must be �@:� (the first character is the return type).</param>
            <returns>
            YES if the method was added successfully, otherwise NO (for example, the class already contains an instance variable with that name).
            </returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.class_getName(System.IntPtr)">
            <summary>
                <para>Returns the name of a class.</para>
                <para>The original declaration is :
            <code>
            const char * class_getName(Class cls)
            </code></para>
            </summary>
            <param name="cls">A class object.</param>
            <returns>The name of the class, or the empty string if cls is Nil.</returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.class_getSuperclass(System.IntPtr)">
            <summary>
                <para>Returns the name of a class.</para>
                <para>You should usually use NSObject�s superclass method instead of this function.</para>
                <para>The original declaration is :
            <code>
            Class class_getSuperclass(Class cls)
            </code></para>
            </summary>
            <param name="cls">A class object.</param>
            <returns>The superclass of the class, or Nil if cls is a root class, or Nil if cls is Nil.</returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.method_getImplementation(System.IntPtr)">
            <summary>
                <para>Returns the implementation of a method.</para>
                <para>The original declaration is :
            <code>
            IMP method_getImplementation(Method method)
            </code></para>
            </summary>
            <param name="method">The method to inspect.</param>
            <returns>
            A function pointer of type IMP.
            </returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.method_setImplementation(System.IntPtr,System.Delegate)">
            <summary>
                <para>Sets the implementation of a method.</para>
                <para>The original declaration is :
            <code>
            IMP method_setImplementation(Method method, IMP imp)
            </code></para>
            </summary>
            <param name="method">The method.</param>
            <param name="imp">The imp.</param>
            <returns>
            The previous implementation of the method.
            </returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.objc_allocateClassPair(System.IntPtr,System.String,System.Int32)">
            <summary>
                <para>Creates a new class and metaclass.</para>
                <para>You can get a pointer to the new metaclass by calling <see cref="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.object_getClass(System.IntPtr)" />.</para>
                <para>To create a new class, start by calling <see cref="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.objc_allocateClassPair(System.IntPtr,System.String,System.Int32)" />. Then set the class's attributes with functions like <see cref="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.class_addMethod(System.IntPtr,System.IntPtr,System.Delegate,System.String)" /> and <see cref="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.class_addIvar(System.IntPtr,System.String,System.Int32,System.Int32,System.String)" />. When you are done building the class, call <see cref="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.objc_registerClassPair(System.IntPtr)" />. The new class is now ready for use.</para>
                <para>The original declaration is :
            <code>
            objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
            </code></para>
            </summary>
            <param name="superclass">The class to use as the new class's superclass, or Nil to create a new root class.</param>
            <param name="name">The string to use as the new class's name. The string will be copied.</param>
            <param name="extraBytes">The number of bytes to allocate for indexed ivars at the end of the class and metaclass objects. This should usually be 0.</param>
            <returns>
            The new class, or Nil if the class could not be created (for example, the desired name is already in use).
            </returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.objc_registerClassPair(System.IntPtr)">
            <summary>
                <para>Registers a class that was allocated using <see cref="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.objc_allocateClassPair(System.IntPtr,System.String,System.Int32)" />.</para>
                <para>The original declaration is :
            <code>
            void objc_registerClassPair(Class cls)
            </code></para>
            </summary>
            <param name="cls">The class you want to register.</param>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.NativeMethods.object_getClass(System.IntPtr)">
            <summary>
                <para>Returns the class of an object.</para>
                <para>The original declaration is :
            <code>
            Class object_getClass(id object)
            </code></para>
            </summary>
            <param name="object">The object you want to inspect.</param>
            <returns>
            The class object of which object is an instance, or Nil if object is nil.
            </returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="T:Monobjc.Runtime.ObjectiveC20.ObjectiveC20Bridge">
            <summary>
            A <see cref="T:Monobjc.Runtime.RuntimeBridge" /> implementation that is targeted on Mac OS X 10.5/Objective-C 2.0.
            </summary>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.ObjectiveC20Bridge.GetClassName(System.IntPtr)">
            <summary>
            Gets the name of the class.
            </summary>
            <param name="nativePointer">A pointer to a class structure (opaque or not).</param>
            <returns>The class name</returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.ObjectiveC20Bridge.GetSuperClass(System.IntPtr)">
            <summary>
            Gets a pointer to the super class structure (opaque or not).
            </summary>
            <param name="nativePointer">A pointer to a class structure (opaque or not).</param>
            <returns>
            A pointer to a class structure (opaque or not).
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.ObjectiveC20.ObjectiveC20Bridge.DefineClass(Monobjc.Bridge.Generators.ProxyGenerator,System.Type)">
            <summary>
            Defines the class, by using various attributes.
            </summary>
            <param name="generator">The dynamic proxy generator.</param>
            <param name="type">The type that contains the definition attibutes.</param>
        </member>
        <member name="T:Monobjc.Runtime.PowerPC.PPC32CallingConventions">
            <summary>
            32bits PowerPC conventions.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.PowerPC.PPC32CallingConventions.IsBigEndian">
            <summary>
            Gets a value indicating whether this architecture has a big-endian byte ordering.
            </summary>
            <value>
                <c>true</c> if this architecture has big-endian byte ordering; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Monobjc.Runtime.PowerPC.PPC32CallingConventions.Is64Bits">
            <summary>
            Gets a value indicating whether this architecture is a 64 bits one.
            </summary>
            <value>
                <c>true</c> if this architecture is a 64 bits one; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Monobjc.Runtime.PowerPC.PPC32CallingConventions.IsFloatingType(System.Type)">
            <summary>
            Determines whether the specified type must be treated as a floating type.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type must be treated as a floating type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.PowerPC.PPC32CallingConventions.IsSmallStructure(System.Type)">
            <summary>
            Determines whether the specified type is a small structure, which means that it can be marshalled directly through processor registers.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type is a small structure; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Monobjc.Runtime.PowerPC.PPC64CallingConventions">
            <summary>
            64bits PowerPC conventions.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.PowerPC.PPC64CallingConventions.IsBigEndian">
            <summary>
            Gets a value indicating whether this architecture has a big-endian byte ordering.
            </summary>
            <value>
                <c>true</c> if this architecture has big-endian byte ordering; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Monobjc.Runtime.PowerPC.PPC64CallingConventions.Is64Bits">
            <summary>
            Gets a value indicating whether this architecture is a 64 bits one.
            </summary>
            <value>
                <c>true</c> if this architecture is a 64 bits one; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Monobjc.Runtime.PowerPC.PPC64CallingConventions.IsFloatingType(System.Type)">
            <summary>
            Determines whether the specified type must be treated as a floating type.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type must be treated as a floating type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.PowerPC.PPC64CallingConventions.IsSmallStructure(System.Type)">
            <summary>
            Determines whether the specified type is a small structure, which means that it can be marshalled directly through processor registers.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type is a small structure; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Monobjc.Runtime.X86.IA32CallingConventions">
            <summary>
            32bits Intel Architecture conventions.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.X86.IA32CallingConventions.IsBigEndian">
            <summary>
            Gets a value indicating whether this architecture has a big-endian byte ordering.
            </summary>
            <value>
                <c>true</c> if this architecture has big-endian byte ordering; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Monobjc.Runtime.X86.IA32CallingConventions.Is64Bits">
            <summary>
            Gets a value indicating whether this architecture is a 64 bits one.
            </summary>
            <value>
                <c>true</c> if this architecture is a 64 bits one; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Monobjc.Runtime.X86.IA32CallingConventions.IsFloatingType(System.Type)">
            <summary>
            Determines whether the specified type must be treated as a floating type.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type must be treated as a floating type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.X86.IA32CallingConventions.IsSmallStructure(System.Type)">
            <summary>
            Determines whether the specified type is a small structure, which means that it can be marshalled directly through processor registers.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type is a small structure; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Monobjc.Runtime.X86.IA64CallingConventions">
            <summary>
            64bits Intel Architecture conventions.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.X86.IA64CallingConventions.IsBigEndian">
            <summary>
            Gets a value indicating whether this architecture has a big-endian byte ordering.
            </summary>
            <value>
                <c>true</c> if this architecture has big-endian byte ordering; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Monobjc.Runtime.X86.IA64CallingConventions.Is64Bits">
            <summary>
            Gets a value indicating whether this architecture is a 64 bits one.
            </summary>
            <value>
                <c>true</c> if this architecture is a 64 bits one; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Monobjc.Runtime.X86.IA64CallingConventions.IsFloatingType(System.Type)">
            <summary>
            Determines whether the specified type must be treated as a floating type.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type must be treated as a floating type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.X86.IA64CallingConventions.IsSmallStructure(System.Type)">
            <summary>
            Determines whether the specified type is a small structure, which means that it can be marshalled directly through processor registers.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type is a small structure; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Monobjc.Runtime.ArchitectureCallingConventions">
            <summary>
                <para>Utility class to adapt marshalling behaviour to the platform.</para>
                <para>For example, small value types can be returned directly from processor registers. As it depends of the processor  behaviour must be adapted for each platform or processor.</para>
                <para>For more details, see the "Introduction to Mac OS X ABI Function Call Guide" (http://developer.apple.com/documentation/DeveloperTools/Conceptual/LowLevelABI/Introduction.html).</para>
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.ArchitectureCallingConventions.Current">
            <summary>
            Gets the current platform conventions.
            </summary>
            <value>The current platform conventions.</value>
        </member>
        <member name="P:Monobjc.Runtime.ArchitectureCallingConventions.IsBigEndian">
            <summary>
            Gets a value indicating whether this architecture has a big-endian byte ordering.
            </summary>
            <value>
                <c>true</c> if this architecture has big-endian byte ordering; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Monobjc.Runtime.ArchitectureCallingConventions.Is64Bits">
            <summary>
            Gets a value indicating whether this architecture is a 64 bits one.
            </summary>
            <value>
                <c>true</c> if this architecture is a 64 bits one; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Monobjc.Runtime.ArchitectureCallingConventions.AllowDynamicCode">
            <summary>
            Gets a value indicating whether dynamic code generation is allowed.
            </summary>
            <value>
                <c>true</c> if dynamic code generation is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Monobjc.Runtime.ArchitectureCallingConventions.IsFloatingType(System.Type)">
            <summary>
            Determines whether the specified type must be treated as a floating type.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type must be treated as a floating type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.ArchitectureCallingConventions.IsStructure(System.Type)">
            <summary>
            Determines whether the specified type is structure.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type is structure; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.ArchitectureCallingConventions.IsSmallStructure(System.Type)">
            <summary>
            Determines whether the specified type is a small structure, which means that it can be marshalled directly through processor registers.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type is a small structure; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Monobjc.Runtime.Gestalt">
            <summary>
                <para>Utility class to makes Gestalt requests to the system.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Runtime.Gestalt.GetOSVersion">
            <summary>
                <para>Return the MacOS version of the operating system.</para>
            </summary>
            <returns>A <see cref="T:Monobjc.Runtime.OSVersion" /> value</returns>
        </member>
        <member name="T:Monobjc.Runtime.OSVersion">
            <summary>
                <para>Enumeration that holds hexadecimal values for MacOS system version.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.OSVersion.MACOS_Unrecognized">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.OSVersion.MACOS_10_0">
            <summary>
            Value for MacOS 10.0.x a.k.a. Cheetah
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.OSVersion.MACOS_10_1">
            <summary>
            Value for MacOS 10.1.x a.k.a. Puma
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.OSVersion.MACOS_10_2">
            <summary>
            Value for MacOS 10.2.x a.k.a. Jaguar
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.OSVersion.MACOS_10_3">
            <summary>
            Value for MacOS 10.3.x a.k.a. Panther
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.OSVersion.MACOS_10_4">
            <summary>
            Value for MacOS 10.4.x a.k.a. Tiger
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.OSVersion.MACOS_10_5">
            <summary>
            Value for MacOS 10.5.x a.k.a. Leopard
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.OSVersion.MACOS_10_6">
            <summary>
            Value for MacOS 10.6.x a.k.a. Snow Leopard
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.NXArchInfo">
            <summary>
                <para>This structure is used to hold the name of the architecture and the corresponding CPU
            type and CPU subtype, together with the architecture's byte order and a brief description string.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.NXArchInfo.name">
            <summary>
            The name of the architecture.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.NXArchInfo.cputype">
            <summary>
            The corresponding CPU type.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.NXArchInfo.cpusubtype">
            <summary>
            The corresponding CPU subtype.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.NXArchInfo.byteorder">
            <summary>
            The architecture's byte order.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.NXArchInfo.description">
            <summary>
            A brief description string.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.NXArchInfo.CpuType">
            <summary>
            Returns the CPU type as a string.
            </summary>
            <value>The CPU type.</value>
        </member>
        <member name="P:Monobjc.Runtime.NXArchInfo.CpuSubType">
            <summary>
            Returns the CPU subtype as a string.
            </summary>
            <value>The CPU subtype.</value>
        </member>
        <member name="M:Monobjc.Runtime.NXArchInfo.ToString">
            <summary>
            Returns the details of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing the details of this instance.
            </returns>
        </member>
        <member name="M:Monobjc.Runtime.NXArchInfo.NXGetLocalArchInfo">
            <summary>
            Returns the <see cref="T:Monobjc.Runtime.NXArchInfo" /> for the local host, or null if none is known.
            </summary>
            <returns>A <see cref="T:Monobjc.Runtime.NXArchInfo" /> structure.</returns>
        </member>
        <member name="T:Monobjc.Runtime.NXByteOrder">
            <summary>
            Byte ordering enumeration, exposed in <see cref="T:Monobjc.Runtime.NXArchInfo" />.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.NXByteOrder.NX_UnknownByteOrder">
            <summary>
            The byte ordering is unknown.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.NXByteOrder.NX_LittleEndian">
            <summary>
            The byte ordering is "Little Endian".
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.NXByteOrder.NX_BigEndian">
            <summary>
            The byte ordering is "Big Endian".
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.CPU_TYPE">
            <summary>
            Type of the CPU, exposed in <see cref="T:Monobjc.Runtime.NXArchInfo" />.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_ANY">
            <summary>
            The CPU type is unknown.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_VAX">
            <summary>
            The CPU type is VAX.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_MC680x0">
            <summary>
            The CPU type is Motorola MC680x0.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_X86">
            <summary>
            The CPU type is Intel x86.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_X86_64">
            <summary>
            The CPU type is Intel x86 64 bits.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_MIPS">
            <summary>
            The CPU type is MIPS.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_MC98000">
            <summary>
            The CPU type is Motorola MC98000.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_HPPA">
            <summary>
            The CPU type is HP-PA Risc.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_ARM">
            <summary>
            The CPU type is ARM.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_MC88000">
            <summary>
            The CPU type is Motorola MC88000.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_SPARC">
            <summary>
            The CPU type is Sun Sparc.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_I860">
            <summary>
            The CPU type is I860.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_ALPHA">
            <summary>
            The CPU type is Digital Alpha.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_POWERPC">
            <summary>
            The CPU type is IBM PowerPC.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.CPU_TYPE.CPU_TYPE_POWERPC64">
            <summary>
            The CPU type is IBM PowerPC 64 bits.
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.CPU_SUBTYPE_ANY">
            <summary>
            CPU subtype for the any type.
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.CPU_SUBTYPE_VAX">
            <summary>
            VAX CPU subtypes
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.CPU_SUBTYPE_MC680x0">
            <summary>
            Motorola MC680x0 CPU subtypes
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.CPU_SUBTYPE_I386">
            <summary>
            Intel I386 CPU subtypes
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.CPU_SUBTYPE_MIPS">
            <summary>
            MIPS CPU subtypes
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.CPU_SUBTYPE_MC98000">
            <summary>
            Motorola MC98000 CPU subtypes
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.CPU_SUBTYPE_HPPA">
            <summary>
            Hewlett Packard PA CPU subtypes
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.CPU_SUBTYPE_MC88000">
            <summary>
            Motorola MC88000 CPU subtypes
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.CPU_SUBTYPE_SPARC">
            <summary>
            Sun Sparc CPU subtypes
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.CPU_SUBTYPE_POWERPC">
            <summary>
            Motorola PowerPC CPU subtypes
            </summary>
        </member>
        <member name="T:Monobjc.Runtime.RuntimeBridge">
            <summary>
                <para>The RuntimeBridge is responsible to manage all the runtime specific tasks:</para>
                <list type="bullet">
                    <item>Class creation and registration</item>
                    <item>Method creation and registration</item>
                    <item>Class lookup</item>
                    <item>...</item>
                </list>
                <para>These tasks differs from one runtime to another so they are grouped.</para>
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.RuntimeBridge.baseImplementations">
            <summary>
            Contains for each imposter class a map between a method and the base implementation.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.RuntimeBridge.Current">
            <summary>
            Gets the current platform conventions.
            </summary>
            <value>The current platform conventions.</value>
        </member>
        <member name="M:Monobjc.Runtime.RuntimeBridge.GetClassName(System.IntPtr)">
            <summary>
            Gets the name of the class.
            </summary>
            <param name="nativePointer">A pointer to a class structure (opaque or not).</param>
            <returns>The class name</returns>
        </member>
        <member name="M:Monobjc.Runtime.RuntimeBridge.GetSuperClass(System.IntPtr)">
            <summary>
            Gets a pointer to the super class structure (opaque or not).
            </summary>
            <param name="nativePointer">A pointer to a class structure (opaque or not).</param>
            <returns>A pointer to a class structure (opaque or not).</returns>
        </member>
        <member name="M:Monobjc.Runtime.RuntimeBridge.DefineClass(Monobjc.Bridge.Generators.ProxyGenerator,System.Type)">
            <summary>
            Defines the class, by using various attributes.
            </summary>
            <param name="generator">The dynamic proxy generator.</param>
            <param name="type">The type that contains the definition attibutes.</param>
        </member>
        <member name="M:Monobjc.Runtime.RuntimeBridge.GetBaseImplementationPointer(System.String,System.String)">
            <summary>
            Gets the base method implementation pointer.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="selector">The selector.</param>
            <returns>A pointer to the method implementation</returns>
        </member>
        <member name="T:Monobjc.Runtime.objc_super">
            <summary>
                <para>Specifies the superclass of an instance.</para>
                <para>The compiler generates an <see cref="T:Monobjc.Runtime.objc_super" /> data structure when it encounters the super keyword as the receiver of a message. It specifies the class definition of the particular superclass that should be messaged.</para>
                <para>The Objective-C declaration is :
            <code>
            struct objc_super
            {
            id receiver;
            Class class;
            };
            </code></para>
            </summary>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.Runtime.objc_super.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Runtime.objc_super" /> class.
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="super_class">The super_class.</param>
        </member>
        <member name="F:Monobjc.Runtime.objc_super.receiver">
            <summary>
            A pointer of type id. Specifies an instance of a class.
            </summary>
        </member>
        <member name="F:Monobjc.Runtime.objc_super.super_class">
            <summary>
            A pointer to a Class data structure. Specifies the particular superclass of the instance to message.
            </summary>
        </member>
        <member name="P:Monobjc.Runtime.objc_super.Size">
            <summary>
            Gets the size of this structure.
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:Monobjc.Runtime.objc_super.PtrToStructure(System.IntPtr)">
            <summary>
            Marshal a native pointer to an <see cref="T:Monobjc.Runtime.objc_super" /> structure.
            </summary>
            <param name="value">The pointer to the native structure.</param>
            <returns>A <see cref="T:Monobjc.Runtime.objc_super" /> structure.</returns>
        </member>
        <member name="M:Monobjc.Runtime.objc_super.StructureToPtr(Monobjc.Runtime.objc_super)">
            <summary>
            Marshal an <see cref="T:Monobjc.Runtime.objc_super" /> structure to a native pointer.
            </summary>
            <param name="structure">The <see cref="T:Monobjc.Runtime.objc_super" /> structure to marshal.</param>
            <returns>A pointer to the native structure.</returns>
            <remarks>Caller is responsible for freeing the allocated block of unmanaged memory.</remarks>
        </member>
        <member name="T:Monobjc.Utils.CustomMethodBinder">
            <summary>
            Subclass of <see cref="T:System.Reflection.Binder" /> used to select or not generic methods when a name collision is possible. Other selection or bind calls are ignored.
            </summary>
        </member>
        <member name="M:Monobjc.Utils.CustomMethodBinder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
            <summary>
            Selects a method to invoke from the given set of methods, based on the actual arguments.
            </summary>
            <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags"></see> enumerators.</param>
            <param name="match">The set of methods Reflection has determined to be a possible match, typically because they have the correct member name.</param>
            <param name="args">The actual arguments passed in. Both the types and values of the arguments can be changed.</param>
            <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
            <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo"></see> used to control the coercion of data types. If culture is null, the <see cref="T:System.Globalization.CultureInfo"></see> for the current thread is used.For example, this parameter is necessary to convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.</param>
            <param name="names">The method name or names.</param>
            <param name="state">A binder-provided object that keeps track of argument reordering. The state parameter is a cookie that was passed to BindToMethod and represents an opaque object. The binder creates this object, and the binder is the sole consumer of this object. If state is not null when BindToMethod returns, the runtime calls <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)"></see>.</param>
            <returns>
            A <see cref="T:System.Reflection.MethodBase"></see> object containing the matching method.
            </returns>
        </member>
        <member name="M:Monobjc.Utils.CustomMethodBinder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Selects a field from the given set of fields, based on the specified criteria.
            </summary>
            <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags"></see> enumerators.</param>
            <param name="match">The set of fields Reflection has determined to be a possible match, typically because they have the correct member name.</param>
            <param name="value">The field value used to locate a matching field.</param>
            <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo"></see> used to control the coercion of data types. If culture is null, the <see cref="T:System.Globalization.CultureInfo"></see> for the current thread is used.For example, this parameter is necessary to convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.</param>
            <returns>
            A <see cref="T:System.Reflection.FieldInfo"></see> object containing the matching field.
            </returns>
        </member>
        <member name="M:Monobjc.Utils.CustomMethodBinder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Selects a method from the given set of methods, based on the argument type.
            </summary>
            <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags"></see> enumerators.</param>
            <param name="match">The set of methods Reflection has determined to be a possible match, typically because they have the correct member name.</param>
            <param name="types">The values used to locate a matching method.</param>
            <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
            <returns>
            A <see cref="T:System.Reflection.MethodBase"></see> object containing the matching method, if found; otherwise, null.
            </returns>
        </member>
        <member name="M:Monobjc.Utils.CustomMethodBinder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Selects a property from the given set of properties, based on the specified criteria.
            </summary>
            <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags"></see> enumerators.</param>
            <param name="match">The set of properties Reflection has determined to be a possible match, typically because they have the correct member name.</param>
            <param name="returnType">The return value the matching property must have.</param>
            <param name="indexes">The index types of the property being searched for. Used for index properties such as the indexer for a class.</param>
            <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
            <returns>
            A <see cref="T:System.Reflection.PropertyInfo"></see> object containing the matching property.
            </returns>
        </member>
        <member name="M:Monobjc.Utils.CustomMethodBinder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Changes the type of the given Object to the given Type.
            </summary>
            <param name="value">The value to change into a new Type.</param>
            <param name="type">The new Type that value will become.</param>
            <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo"></see> used to control the coercion of data types. If culture is null, the <see cref="T:System.Globalization.CultureInfo"></see> for the current thread is used.For example, this parameter is necessary to convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.</param>
            <returns>
            An Object containing the given value as the new type.
            </returns>
        </member>
        <member name="M:Monobjc.Utils.CustomMethodBinder.ReorderArgumentArray(System.Object[]@,System.Object)">
            <summary>
            Upon returning from <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)"></see>, restores the args argument to what it was when it came from BindToMethod.
            </summary>
            <param name="args">The actual arguments passed in. Both the types and values of the arguments can be changed.</param>
            <param name="state">A binder-provided object that keeps track of argument reordering.</param>
        </member>
        <member name="T:Monobjc.Utils.TypeComparer">
            <summary>
            Used to sort types as <see cref="T:System.Type" /> doesn't implements <see cref="T:System.IComparable" />.
            </summary>
        </member>
        <member name="M:Monobjc.Utils.TypeComparer.Compare(System.Type,System.Type)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
        </member>
        <member name="T:Monobjc.Class">
            <summary>
            Represents a managed wrapper around an Objective-C Class definition.
            </summary>
        </member>
        <member name="M:Monobjc.Class.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Class" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Class.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Class" /> class.
            </summary>
            <param name="value">The native pointer.</param>
            <exception cref="T:System.ArgumentNullException">If the pointer is null</exception>
        </member>
        <member name="P:Monobjc.Class.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Monobjc.Class.SuperClass">
            <summary>
            Returns the managed wrapper of the super class for this instance.
            </summary>
        </member>
        <member name="M:Monobjc.Class.MapClass(System.Type,System.String,Monobjc.Class)">
            <summary>
            Maps the given class using the type, the classname and the instance.
            </summary>
            <param name="type">The type.</param>
            <param name="className">Name of the class.</param>
            <param name="classInstance">The class instance.</param>
            <exception cref="T:Monobjc.ObjectiveCException">The mapping is not possible because the type or the classname are already registered</exception>
        </member>
        <member name="M:Monobjc.Class.GetClass(System.Type)">
            <summary>
            Gets the class by its type.
            </summary>
            <param name="type">The type.</param>
            <returns>An <see cref="T:Monobjc.Class" /> instance if found.</returns>
        </member>
        <member name="M:Monobjc.Class.GetClass(System.String)">
            <summary>
            Gets the class by its name.
            </summary>
            <param name="className">Name of the class.</param>
            <returns>An <see cref="T:Monobjc.Class" /> instance if found.</returns>
        </member>
        <member name="M:Monobjc.Class.GetClassFromObject(Monobjc.Id)">
            <summary>
            Gets the class from object.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The corresponding class</returns>
            <exception cref="T:System.ArgumentNullException">If the object is null</exception>
        </member>
        <member name="M:Monobjc.Class.GetClassFromType(System.Type)">
            <summary>
            Gets the type of the class from.
            </summary>
            <param name="type">The type.</param>
            <returns>The corresponding class</returns>
            <exception cref="T:System.ArgumentNullException">If the type is null</exception>
        </member>
        <member name="M:Monobjc.Class.GetClassFromName(System.String)">
            <summary>
            Gets the name of the class from.
            </summary>
            <param name="className">Name of the class.</param>
            <returns>The corresponding class</returns>
            <exception cref="T:System.ArgumentNullException">If the class name is null or empty</exception>
        </member>
        <member name="M:Monobjc.Class.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Monobjc.Class.DumpClasses">
            <summary>
            Dumps the class mappings of the currently registered clases. Use for debugging purpose only.
            </summary>
        </member>
        <member name="T:Monobjc.IBActionAttribute">
            <summary>
                <para>Marks a method as an action for Interface Builder.</para>
            </summary>
        </member>
        <member name="T:Monobjc.IBOutletAttribute">
            <summary>
                <para>Marks a field as an outlet for Interface Builder.</para>
            </summary>
        </member>
        <member name="T:Monobjc.IManagedWrapper">
            <summary>
            Interface to identity classes or interfaces that can act as a managed wrapper.
            </summary>
        </member>
        <member name="P:Monobjc.IManagedWrapper.NativePointer">
            <summary>
                <para>Gets the underlying native pointer.</para>
            </summary>
            <value>The native pointer.</value>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessage(System.String,System.Object[])">
            <summary>
                <para>Sends a message to this receiver (either a Class or an object instance).</para>
            </summary>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessage``1(System.String,System.Object[])">
            <summary>
                <para>Sends a message to this receiver (either a Class or an object instance).</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessageSuper(Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessageSuper``1(Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessage(System.String)">
            <summary>
                <para>Sends a message to this receiver (either a Class or an object instance).</para>
            </summary>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessage``1(System.String)">
            <summary>
                <para>Sends a message to this receiver (either a Class or an object instance).</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="selector">The selector.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessageSuper(Monobjc.Class,System.String)">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessageSuper``1(Monobjc.Class,System.String)">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessageVarArgs(System.String,System.Object[])">
            <summary>
                <para>Sends a message to this receiver (either a Class or an object instance).</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
            </summary>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessageVarArgs``1(System.String,System.Object[])">
            <summary>
                <para>Sends a message to this receiver (either a Class or an object instance).</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessageSuperVarArgs(Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.IManagedWrapper.SendMessageSuperVarArgs``1(Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.IManagedWrapper.CastTo``1">
            <summary>
            Cast the current instance to the given type. The cast is dynamically tested for safety.
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <returns>The cast instance</returns>
            <exception cref="T:Monobjc.ObjectiveCClassCastException">If an error occured during the cast</exception>
        </member>
        <member name="M:Monobjc.IManagedWrapper.CastAs``1">
            <summary>
            Try to cast the current instance to the given type. The cast is dynamically tested for safety.
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <returns>The cast instance or null if the cast is not valid</returns>
        </member>
        <member name="T:Monobjc.Id">
            <summary>
                <para>This type represents a native object in the Objective-C runtime and is referenced through a memory pointer.</para>
                <para>For each managed instance is associated a native pointer that allows a two-way messaging between the .NET and the Objective-C runtime.</para>
            </summary>
        </member>
        <member name="M:Monobjc.Id.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Id" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.Id.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.Id" /> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Monobjc.Id.Class">
            <summary>
                <para>Gets the class of the underlying instance.</para>
                <para>The result could be very different from the one returned by the <see cref="P:Monobjc.Id.MappedClass" /> property,
            as the value returned is the result of the message "class" being passed to the native instance.</para>
            </summary>
            <value>The class.</value>
            <remarks>Original signature is '- (Class)class'</remarks>
        </member>
        <member name="P:Monobjc.Id.MappedClass">
            <summary>
                <para>Gets the class mapped to this managed instance.</para>
                <para>The result could be very different from the one returned by the <see cref="T:Monobjc.Class" /> property,
            as the value returned is the result of the class mapped to the managed type.</para>
            </summary>
            <value>The native class mapped to this instance.</value>
        </member>
        <member name="P:Monobjc.Id.NativePointer">
            <summary>
                <para>Gets or sets the underlying native pointer.</para>
            </summary>
            <value>The native pointer.</value>
        </member>
        <member name="M:Monobjc.Id.SendMessage(System.String,System.Object[])">
            <summary>
            Sends a message to this receiver (either a Class or an object instance).
            </summary>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.Id.SendMessage``1(System.String,System.Object[])">
            <summary>
            Sends a message to this receiver (either a Class or an object instance).
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.Id.SendMessageSuper(Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.Id.SendMessageSuper``1(Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.Id.SendMessage(System.String)">
            <summary>
            Sends a message to this receiver (either a Class or an object instance).
            </summary>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Monobjc.Id.SendMessage``1(System.String)">
            <summary>
            Sends a message to this receiver (either a Class or an object instance).
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="selector">The selector.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.Id.SendMessageSuper(Monobjc.Class,System.String)">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Monobjc.Id.SendMessageSuper``1(Monobjc.Class,System.String)">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.Id.SendMessageVarArgs(System.String,System.Object[])">
            <summary>
                <para>Sends a message to this receiver (either a Class or an object instance).</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
            </summary>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.Id.SendMessageVarArgs``1(System.String,System.Object[])">
            <summary>
                <para>Sends a message to this receiver (either a Class or an object instance).</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.Id.SendMessageSuperVarArgs(Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.Id.SendMessageSuperVarArgs``1(Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of this receiver.</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.Id.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Monobjc.Id.Equals(Monobjc.Id)">
            <summary>
            Equalses the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.Id.CastTo``1">
            <summary>
            Cast the current instance to the given type. the cast is dynamically tested for safety
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <returns>The cast instance</returns>
            <exception cref="T:Monobjc.ObjectiveCClassCastException">If an error occured during the cast</exception>
        </member>
        <member name="M:Monobjc.Id.CastAs``1">
            <summary>
            Try to cast the current instance to the given type. The cast is dynamically tested for safety.
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <returns>The cast instance or null if the cast is not valid</returns>
        </member>
        <member name="M:Monobjc.Id.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Monobjc.Id.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Monobjc.Id.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="cleanManaged">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Monobjc.Id.op_Inequality(Monobjc.Id,Monobjc.Id)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="id1">The id1.</param>
            <param name="id2">The id2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Monobjc.Id.op_Equality(Monobjc.Id,Monobjc.Id)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="id1">The id1.</param>
            <param name="id2">The id2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Monobjc.Id_Extensions">
            <summary>
            Extensions methods for Id class, that are null friendly (i.e. a call on a null reference returns.
            </summary>
        </member>
        <member name="M:Monobjc.Id_Extensions.SafeCastTo``1(Monobjc.Id)">
            <summary>
            Cast the current instance to the given type. the cast is dynamically tested for safety
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <returns>The cast instance or null if the reference is null</returns>
            <exception cref="T:Monobjc.ObjectiveCClassCastException">If an error occured during the cast</exception>
        </member>
        <member name="M:Monobjc.Id_Extensions.SafeCastAs``1(Monobjc.Id)">
            <summary>
            Try to cast the current instance to the given type. The cast is dynamically tested for safety.
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <returns>The cast instance or null if the cast is not valid or if the reference is null</returns>
        </member>
        <member name="T:Monobjc.IdMarshaler`1">
            <summary>
            Custom marshaller for <see cref="T:Monobjc.Id" /> instances. This makes interop a breeze as it cuts a lot of code.
            </summary>
        </member>
        <member name="M:Monobjc.IdMarshaler`1.GetInstance(System.String)">
            <summary>
            Returns a shared instance of the custom marshaller.
            </summary>
            <param name="cookie">A cookie string from the interop layer</param>
            <returns>The shared instance</returns>
        </member>
        <member name="M:Monobjc.IdMarshaler`1.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            Converts the unmanaged data to managed data.
            </summary>
            <param name="pNativeData">A pointer to the unmanaged data to be wrapped.</param>
            <returns>
            Returns the managed view of the COM data.
            </returns>
        </member>
        <member name="M:Monobjc.IdMarshaler`1.MarshalManagedToNative(System.Object)">
            <summary>
            Converts the managed data to unmanaged data.
            </summary>
            <param name="ManagedObj">The managed object to be converted.</param>
            <returns>
            Returns the COM view of the managed object.
            </returns>
        </member>
        <member name="M:Monobjc.IdMarshaler`1.CleanUpNativeData(System.IntPtr)">
            <summary>
            Performs necessary cleanup of the unmanaged data when it is no longer needed.
            </summary>
            <param name="pNativeData">A pointer to the unmanaged data to be destroyed.</param>
        </member>
        <member name="M:Monobjc.IdMarshaler`1.CleanUpManagedData(System.Object)">
            <summary>
            Performs necessary cleanup of the managed data when it is no longer needed.
            </summary>
            <param name="ManagedObj">The managed object to be destroyed.</param>
        </member>
        <member name="M:Monobjc.IdMarshaler`1.GetNativeDataSize">
            <summary>
            Returns the size of the native data to be marshaled.
            </summary>
            <returns>The size in bytes of the native data.</returns>
        </member>
        <member name="T:Monobjc.Logger">
            <summary>
                <para>Very basic logger that handles four levels of log.</para>
                <para>The levels are set through an environment variable <c>MONOBJC_DEBUG</c>. Output logs are printed in a Terminal console.</para>
                <para>The levels are :</para>
                <list type="table">
                    <listheader>
                        <term>Level</term>
                        <description>Associated Output</description>
                    </listheader>
                    <item>
                        <term>TRACE (MONOBJC_DEBUG = 4)</term>
                        <description>Very low-level log (message passing, exhaustive cache content). Beware that this level will REALLY slow down the execution.</description>
                    </item>
                    <item>
                        <term>DEBUG (MONOBJC_DEBUG &gt;= 3)</term>
                        <description>Low-level log (class registration, proxy creation, messaging, etc.). Beware that this level will slow down the execution.</description>
                    </item>
                    <item>
                        <term>INFO (MONOBJC_DEBUG &gt;= 2)</term>
                        <description>Output informationnal log (bridge starting, architectre and runtime selection, statistics, etc.). Beware that this level may slow down the execution.</description>
                    </item>
                    <item>
                        <term>WARN (MONOBJC_DEBUG &gt;= 1)</term>
                        <description>Output warning log. There is no noticeable impact</description>
                    </item>
                    <item>
                        <term>ERROR (MONOBJC_DEBUG &gt;= 0 or not set)</term>
                        <description>Output error log. There is no noticeable impact</description>
                    </item>
                </list>
            </summary>
        </member>
        <member name="M:Monobjc.Logger.#ctor">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:Monobjc.Logger.TraceEnabled">
            <summary>
            Gets a value indicating whether trace level is enabled.
            </summary>
            <value>
                <c>true</c> if trace is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Monobjc.Logger.DebugEnabled">
            <summary>
            Gets a value indicating whether debug level is enabled.
            </summary>
            <value>
                <c>true</c> if debug is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Monobjc.Logger.InfoEnabled">
            <summary>
            Gets a value indicating whether info level is enabled.
            </summary>
            <value>
                <c>true</c> if info level enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Monobjc.Logger.WarnEnabled">
            <summary>
            Gets a value indicating whether warn level is enabled.
            </summary>
            <value>
                <c>true</c> if warn level enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Monobjc.Logger.Trace(System.String,System.String)">
            <summary>
            Outputs a TRACE log.
            </summary>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Monobjc.Logger.Debug(System.String,System.String)">
            <summary>
            Outputs a DEBUG log.
            </summary>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Monobjc.Logger.Info(System.String,System.String)">
            <summary>
            Outputs an INFO log.
            </summary>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Monobjc.Logger.Warn(System.String,System.String)">
            <summary>
            Outputs a WARN log.
            </summary>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Monobjc.Logger.Error(System.String,System.String)">
            <summary>
            Outputs an ERROR log.
            </summary>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Monobjc.ObjectiveCClassAttribute">
            <summary>
                <para>Allows a .NET class to be registered within the Objective-C runtime.</para>
                <para>All the ascendant classes in the inheritance hierarchy must have a <see cref="T:Monobjc.ObjectiveCClassAttribute" /> attribute,
            otherwise the runtime will not be able to use it.</para>
            </summary>
            <example>
                <para>The following example shows how to use the <see cref="T:Monobjc.ObjectiveCClassAttribute" /> attribute.</para>
                <para>The type <c>MyOwnType1</c> will be registered with the "MyOwnType1" name.
            <code>
            [ObjectiveCClass]
            public class MyOwnType1 : NSObject
            {
            ...
            }
            </code></para>
                <para>The type <c>MyOwnType2</c> will be registered with the "Type2" name.
            <code>
            [ObjectiveCClass("Type2")]
            public class MyOwnType2 : NSObject
            {
            ...
            }
            </code></para>
            </example>
        </member>
        <member name="M:Monobjc.ObjectiveCClassAttribute.#ctor">
            <summary>
                <para>Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCClassAttribute" /> class.</para>
                <para>The name that will be used to register the tagged type will be its short name, i.e. "MyType"
            if the type is "Foo.Bar.MyType".</para>
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCClassAttribute.#ctor(System.String)">
            <summary>
                <para>Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCClassAttribute" /> class.</para>
                <para>Note: the name MUST be an ANSI identifier.</para>
            </summary>
            <param name="name">The name that will be used to register the tagged type.</param>
        </member>
        <member name="P:Monobjc.ObjectiveCClassAttribute.Name">
            <summary>
                <para>Gets the name to use when registering this class in the Objective-C runtime.</para>
            </summary>
            <value>The name to use.</value>
        </member>
        <member name="P:Monobjc.ObjectiveCClassAttribute.InterceptCallsFor">
            <summary>
                <para>Gets or sets the name of the class whose methods will be intercetped by this class.</para>
                <para>The Objective-C runtime allows method replacement. It is useful to introduce
            a new behaviour wihtin a class hierarchy or to intercept messages.</para>
                <para>Note: the name MUST be an ANSI identifier.</para>
            </summary>
            <value>The name of the recplaced class.</value>
        </member>
        <member name="P:Monobjc.ObjectiveCClassAttribute.Interceptor">
            <summary>
                <para>Gets a value indicating whether the exported type is an imposter (<see cref="P:Monobjc.ObjectiveCClassAttribute.InterceptCallsFor" /> property).</para>
            </summary>
            <value>
                <c>true</c> if the exported type is an interceptor; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Monobjc.ObjectiveCClassAttribute.ToString">
            <summary>
                <para>Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</para>
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Monobjc.ObjectiveCClassCastException">
            <summary>
            Exception raised if a dynamic class cast failed.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCClassCastException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCClassCastException" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCClassCastException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCClassCastException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCClassCastException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCClassCastException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCClassCastException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCClassCastException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Monobjc.ObjectiveCClassMappingException">
            <summary>
            Exception raised if a dynamic class cast failed.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCClassMappingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCClassMappingException" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCClassMappingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCClassMappingException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCClassMappingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCClassMappingException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCClassMappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCClassMappingException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Monobjc.ObjectiveCCodeGenerationException">
            <summary>
            Exception raised if a dynamic code generation failed.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCCodeGenerationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCCodeGenerationException" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCCodeGenerationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCCodeGenerationException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCCodeGenerationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCCodeGenerationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCCodeGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCCodeGenerationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Monobjc.ObjectiveCEncoding">
            <summary>
                <para>Utility class to handle encoding of types and methods. </para>
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCEncoding.GetSelector(System.Reflection.MethodBase)">
            <summary>
                <para>Gets the selector for the given method or constructor.</para>
                <para>The selector for a method is build with the following rules:
            <list type="bullet"><item>Selector begins with the method name</item><item>The first parameter if present is appended by its name with the "With" prefix</item><item>The other parameters if present are appended by their names</item></list></para>
                <para>Here are some examples of result:
            <list type="table"><listheader><term>Method</term><description>Corresponding selector</description></listheader><item><term>public void DoThis()</term><description>DoThis</description></item><item><term>public void DoThis(int value)</term><description>DoThisWithValue:</description></item><item><term>public void DoThis(NSString str, int val)</term><description>DoThisWithStr:val:</description></item></list></para>
                <para>The selector for a constructor is build with the following rules:
            <list type="bullet"><item>Selector begins with "Init"</item><item>The first parameter if present is appended by its name with the "With" prefix</item><item>The other parameters if present are appended by their names</item></list></para>
                <para>Here are some examples of result:
            <list type="table"><listheader><term>Constructor</term><description>Corresponding selector</description></listheader><item><term>public TestClass()</term><description>Init</description></item><item><term>public TestClass(int value)</term><description>InitWithValue:</description></item><item><term>public TestClass(NSString str, int val)</term><description>InitWithStr:Val:</description></item></list></para>
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>
            A selector compliant with Objective-C messaging.
            </returns>
        </member>
        <member name="M:Monobjc.ObjectiveCEncoding.GetSignature(System.Reflection.MethodBase)">
            <summary>
                <para>Gets the signature for the given method or constructor.</para>
                <para>Constructors are considered as static method returning the declaring type.</para>
                <para>Here are some examples of result for methods:
            <list type="table"><listheader><term>Method</term><description>Corresponding signature (on IA32 architecture)</description></listheader><item><term>public void DoThis()</term><description>v8@0:4</description></item><item><term>public void DoThis(int value)</term><description>v12@0:4i8</description></item><item><term>public void DoThis(NSString str, int val)</term><description>v16@0:4@8i12</description></item></list></para>
                <para>Here are some examples of result for constructor:
            <list type="table"><listheader><term>Constructor</term><description>Corresponding signature (on IA32 architecture)</description></listheader><item><term>public TestClass()</term><description>@8@0:4</description></item><item><term>public TestClass(int value)</term><description>@12@0:4i8</description></item><item><term>public TestClass(NSString str, int val)</term><description>@16@0:4@8i12</description></item></list></para>
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>
            A signature compliant with Objective-C messaging.
            </returns>
        </member>
        <member name="M:Monobjc.ObjectiveCEncoding.GetTypeEncoding(System.Type)">
            <summary>
                <para>Return the Objective-C encoding used to build selector signature.</para>
                <para>Here are some examples of encoding:
            <list type="table"><listheader><term>Type</term><description>Corresponding encoding</description></listheader><item><term>void</term><description>v</description></item><item><term>int or Int32</term><description>i</description></item><item><term>NSString</term><description>@</description></item><item><term>int[]</term><description>^i</description></item><item><term>NSRect</term><description>{NSRect={NSPoint=ff}{NSSize=ff}}</description></item></list></para>
                <para>For a full list of the encoding, refer to http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Articles/chapter_5_section_7.html</para>
            </summary>
            <param name="type">The type to encode.</param>
            <returns>The encoding representation</returns>
        </member>
        <member name="M:Monobjc.ObjectiveCEncoding.GetTypeSize(System.Type)">
            <summary>
                <para>Return the native type size used to build selector signature. The value represents the size to use when the type is placed on the parameter stack.</para>
                <para>Here are some examples of sizes:
            <list type="table"><listheader><term>Type</term><description>Corresponding size (on IA32 architecture)</description></listheader><item><term>bool or Boolean</term><description>1</description></item><item><term>int or Int32</term><description>4</description></item><item><term>NSString</term><description>4</description></item><item><term>NSRect</term><description>16</description></item></list></para>
            </summary>
            <para>Of course, the size value is platform dependant.</para>
            <param name="type">The type to measure.</param>
            <returns>The size value</returns>
        </member>
        <member name="M:Monobjc.ObjectiveCEncoding.GetTypeAlignment(System.Type)">
            <summary>
                <para>Return the native alignment used when adding an instance variable. The value represents the recommended alignment to use when the type is stored in the memory.</para>
                <para>Here are some examples of sizes:
            <list type="table"><listheader><term>Type</term><description>Corresponding alignment (on IA32 architecture)</description></listheader><item><term>bool or Boolean</term><description>1</description></item><item><term>int or Int32</term><description>4</description></item><item><term>NSString</term><description>4</description></item><item><term>NSRect</term><description>16</description></item></list></para>
            </summary>
            <para>Of course, the alignment value is platform dependant.</para>
            <param name="type">The type to align.</param>
            <returns>The alignment value</returns>
        </member>
        <member name="M:Monobjc.ObjectiveCEncoding.InitializeEncodings">
            <summary>
            Initialize the encoding strings for base types.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCEncoding.InitializeSizes">
            <summary>
            Initialize the sizes for base types.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCEncoding.InitializeAlignements">
            <summary>
            Initialize the alignements for base types.
            TODO : Compute alignement according to the platform.
            </summary>
        </member>
        <member name="T:Monobjc.ObjectiveCException">
            <summary>
            Exception raised if a something failed inside the bridge.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCException" /> class.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Monobjc.ObjectiveCFieldAttribute">
            <summary>
                <para>Exposes a field to the Objective-C runtime, so it can be manipulated from the runtime.</para>
                <para>When the tagged type (with the <see cref="T:Monobjc.ObjectiveCClassAttribute" />) is registered in the Objective-C
            runtime, all the tagged fields will be exported, which means they will be accessible from native classes.</para>
                <para>Fields declared by <see cref="T:Monobjc.ObjectiveCFieldAttribute" /> are synchronized before and after method calls if required (see <see cref="T:Monobjc.ObjectiveCMessageAttribute" />).</para>
            </summary>
            <example>
                <para>The following example shows how to use the <see cref="T:Monobjc.ObjectiveCFieldAttribute" /> attribute.</para>
                <code>
            [ObjectiveCClass]
            public class MyOwnType1 : NSObject
            {
            [ObjectiveCField]
            public bool myBool;
            [ObjectiveCField]
            public NSString aString;
            public MyOwnType1()
            {
            ...
            }
            ...
            }
            </code>
            </example>
        </member>
        <member name="M:Monobjc.ObjectiveCFieldAttribute.#ctor">
            <summary>
                <para>Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCFieldAttribute" /> class.</para>
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCFieldAttribute.#ctor(System.String)">
            <summary>
                <para>Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCFieldAttribute" /> class.</para>
                <para>Note: the name MUST be an ANSI identifier.</para>
            </summary>
        </member>
        <member name="P:Monobjc.ObjectiveCFieldAttribute.Name">
            <summary>
                <para>Gets the name to be used when the enclosing type is registered within the Objective-C runtime.</para>
            </summary>
            <value>The name to use.</value>
        </member>
        <member name="P:Monobjc.ObjectiveCFieldAttribute.Encoding">
            <summary>
            Gets or sets the type encoding to be used when the enclosing type is registered within the Objective-C runtime.
            <para>Use this property if you want to override the default mapping computed by <see cref="T:Monobjc.ObjectiveCEncoding" />.</para></summary>
            <value>The type encoding to use.</value>
        </member>
        <member name="P:Monobjc.ObjectiveCFieldAttribute.Size">
            <summary>
            Gets or sets the size to be used when the enclosing type is registered within the Objective-C runtime.
            <para>Use this property if you want to override the default size computed by <see cref="T:Monobjc.ObjectiveCEncoding" />.</para></summary>
            <value>The size to use.</value>
        </member>
        <member name="M:Monobjc.ObjectiveCFieldAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Monobjc.ObjectiveCMessageAttribute">
            <summary>
                <para>Allows a constructor or a method to be exported as part of a native class within the Objective-C runtime.</para>
                <para>When the tagged type (with the <see cref="T:Monobjc.ObjectiveCClassAttribute" />) is registered in the Objective-C
            runtime, all the tagged constructors and methods will be exported, which means they will be callable from
            native classes or instances.</para>
            </summary>
            <example>
                <para>The following example shows how to use the <see cref="T:Monobjc.ObjectiveCMessageAttribute" /> attribute.</para>
                <code>
            [ObjectiveCClass]
            public class MyOwnType1 : NSObject
            {
            [ObjectiveCMessage]
            public ObjectiveCMessageAttribute(int a, int b)
            {
            ...
            }
            [ObjectiveCMessage]
            public int DoThis(bool value)
            {
            ...
            }
            [ObjectiveCMessage("doSomeDummyThing:")]
            public void DoDummy(String str)
            {
            ...
            }
            ...
            }
            </code>
            </example>
        </member>
        <member name="M:Monobjc.ObjectiveCMessageAttribute.#ctor">
            <summary>
                <para>Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCMessageAttribute" /> class.</para>
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCMessageAttribute.#ctor(System.String)">
            <summary>
                <para>Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCMessageAttribute" /> class.</para>
                <para>Note: the selector MUST be an ANSI identifier.</para>
            </summary>
            <param name="selector">The selector to use.</param>
        </member>
        <member name="P:Monobjc.ObjectiveCMessageAttribute.Selector">
            <summary>
                <para>Gets the selector.</para>
                <para>Use the given selector when exporting the constructor or the method in the Objective-C runtime. The
            selector must conforms to the rules defined in the "The Objective-C Programming Language" and implemented by
            <see cref="T:Monobjc.ObjectiveCEncoding" />.</para>
            </summary>
            <value>The selector to use.</value>
        </member>
        <member name="P:Monobjc.ObjectiveCMessageAttribute.Signature">
            <summary>
                <para>Gets or sets the signature.</para>
                <para>Use the given signature when exporting the constructor or the method in the Objective-C runtime. The
            signature must conforms to the type encoding defined in the "The Objective-C Programming Language" and
            implemented by <see cref="T:Monobjc.ObjectiveCEncoding" />.</para>
            </summary>
            <value>The signature to use.</value>
        </member>
        <member name="P:Monobjc.ObjectiveCMessageAttribute.SynchronizeFields">
            <summary>
                <para>Gets or sets a value indicating whether to synchronize fields.</para>
                <para>When <c>true</c>, declared fields will be populated from their native counterpart before the
            method call, and will be exported to their native counterpart after the method call. See the
            <see cref="T:Monobjc.ObjectiveCFieldAttribute" /> to know about field export.</para>
            </summary>
            <value>
                <c>true</c> if synchronization of fields has to be performed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Monobjc.ObjectiveCMessageAttribute.ToString">
            <summary>
                <para>Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</para>
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Monobjc.ObjectiveCProtocolAttribute">
            <summary>
                <para>Allows a .NET interface to be registered within the Objective-C runtime.</para>
                <para>When a native instance is returned, the Objective-C runtime provides a wrapper that allows
            calls to the native instance through the methods of the interface.</para>
            </summary>
            <example>
                <para>The following example shows how to use the <see cref="T:Monobjc.ObjectiveCProtocolAttribute" /> attribute.</para>
                <para>The type <c>MyOwnType1</c> will be registered with the "MyOwnType1" name.
            <code>
            [ObjectiveCProtocolAttribute]
            public interface MyOwnInterface1
            {
            ...
            }
            </code></para>
                <para>The type <c>MyOwnType2</c> will be registered with the "Type2" name.
            <code>
            [ObjectiveCProtocolAttribute("Interface2")]
            public interface MyOwnInterface2
            {
            ...
            }
            </code></para>
            </example>
        </member>
        <member name="M:Monobjc.ObjectiveCProtocolAttribute.#ctor">
            <summary>
                <para>Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCProtocolAttribute" /> class.</para>
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCProtocolAttribute.#ctor(System.String)">
            <summary>
                <para>Initializes a new instance of the <see cref="T:Monobjc.ObjectiveCProtocolAttribute" /> class.</para>
                <para>Note: the name MUST be an ANSI identifier.</para>
            </summary>
            <param name="name">The name to use when registering the interface in the Objective-C runtime.</param>
        </member>
        <member name="P:Monobjc.ObjectiveCProtocolAttribute.Name">
            <summary>
            Gets or sets the name to use when registering the interface in the Objective-C runtime.
            </summary>
            <value>The name to use.</value>
        </member>
        <member name="M:Monobjc.ObjectiveCProtocolAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Monobjc.ObjectiveCRuntime">
            <summary>
                <para>Entry point of the .NET/Objective-C bridge.</para>
                <para>The runtime is responsible for:
            <list type="bullet"><item>The mapping between managed type and Objective-C classes</item><item>The mapping between managed instances and their native counterparts</item><item>The sending of message from .NET to Objective-C</item></list></para>
                <para>A lot of magic occurs behind the scene to ensure that managed type and instances are seen as native
            in the Objective-C runtime.</para>
            </summary>
        </member>
        <member name="T:Monobjc.ObjectiveCRuntime.Creator`1">
            <summary>
            Factory class to create generic instance with non-default constructors.
            </summary>
            <typeparam name="TType">The parametric type</typeparam>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.Creator`1.CreateInstance(System.IntPtr)">
            <summary>
            Creates a generic instance of the parametric type.
            </summary>
            <param name="value">The value.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.Creator`1.CreateInvoker">
            <summary>
            Creates the invoker.
            </summary>
        </member>
        <member name="T:Monobjc.ObjectiveCRuntime.DynamicCreateInvoker`1">
            <summary>
            Delegate to construct new instance of <see cref="T:Monobjc.IManagedWrapper" /> implementation.
            </summary>
        </member>
        <member name="E:Monobjc.ObjectiveCRuntime.SignalException">
            <summary>
            Occurs when a system signal is raised.
            </summary>
        </member>
        <member name="P:Monobjc.ObjectiveCRuntime.MainBundlePath">
            <summary>
            Gets the path to the current bundle.
            </summary>
            <value>An absolute path to the main bundle.</value>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.DefineClass(System.Type)">
            <summary>
                <para>Defines the class in the Objective-C runtime.</para>
                <para>If the class is already defined in the Objective-C runtime, it does nothing.</para>
                <para>If the class is not defined in the Objective-C runtime, build a proxy that will
            be exported and exposed to the Objective-C runtime.</para>
            </summary>
            <param name="type">The type.</param>
            <returns>A <see cref="T:Monobjc.Class" /> instance for the type.</returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.ExtractClassName(System.Type)">
            <summary>
            Extract the class name to use when defining a new class :
            <list type="number"><item>Check for the presence of a <see cref="T:Monobjc.ObjectiveCClassAttribute" /> on the type. If the attribute is missing, an exception is thrown.</item><item>Check for the name value of the <see cref="T:Monobjc.ObjectiveCClassAttribute" />. If the attribute doesn't supply a name, the short name of the Type is used.</item></list></summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.ExtractSuperClassName(System.Type)">
            <summary>
            Extract the super class name to use when defining a new class :
            <list type="number"><item>Check for the presence of a <see cref="T:Monobjc.ObjectiveCClassAttribute" /> on the base type. If the attribute is missing, an exception is thrown unless this is a for a Root Class.</item><item>Check for the name value of the <see cref="T:Monobjc.ObjectiveCClassAttribute" />. If the attribute doesn't supply a name, the short name of the Type is used.</item><item>Check for the name found previously and correct it if the super class name is the imposter one.</item></list></summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.IsAnInterceptor(System.Type)">
            <summary>
            Determines whether the specified type is an interceptor.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type is an interceptor; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.DumpClasses">
            <summary>
            Dumps the class mappings of the currently registered clases. Use for debugging purpose only.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.MapInstance(System.IntPtr,Monobjc.Id)">
            <summary>
            Maps the specified native pointer to the given managed instance.
            </summary>
            <param name="value">The native pointer.</param>
            <param name="instance">The managed instance.</param>
            <returns>A pointer to the instance.</returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.RemoveInstance(Monobjc.Id)">
            <summary>
            Removes the specified native pointer.
            </summary>
            <param name="instance">The managed instance.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.GetInstance``1(System.IntPtr)">
            <summary>
            Gets the instance related to the native pointer.
            </summary>
            <typeparam name="TClass">The type of the instance.</typeparam>
            <param name="value">The native pointer.</param>
            <returns>
            A cached or created instance of the given type. If the pointer is null, then a null is returned.
            </returns>
            <exception cref="T:Monobjc.ObjectiveCClassCastException">If an error occured during the cast</exception>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.GetInstance``1(System.IntPtr,System.Boolean)">
            <summary>
            Gets the instance related to the native pointer.
            </summary>
            <typeparam name="TClass">The type of the instance.</typeparam>
            <param name="value">The native pointer.</param>
            <param name="canFail">if set to <c>true</c>, then the retrieval can fail.</param>
            <returns>
            A cached or created instance of the given type. If the pointer is null, then a null is returned.
            </returns>
            <exception cref="T:Monobjc.ObjectiveCClassCastException">If an error occured during the cast</exception>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.CastTo``1(Monobjc.Id)">
            <summary>
            Casts the instance to a given type.
            </summary>
            <typeparam name="TClass">The type of the instance.</typeparam>
            <param name="instance">The instance to cast.</param>
            <returns>An instance of the given type.</returns>
            <exception cref="T:Monobjc.ObjectiveCClassCastException">If an error occured during the cast</exception>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.CastAs``1(Monobjc.Id)">
            <summary>
            Try to cast the instance to a given type.
            </summary>
            <typeparam name="TClass">The type of the instance.</typeparam>
            <param name="instance">The instance to cast.</param>
            <returns>An instance of the given type or null if the cast fails.</returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.GetBaseImplementationPointer(System.String,System.String)">
            <summary>
                <para>Gets the base implementation pointer for a given class and a selector.</para>
                <para>The returned pointer is the original pointer, which allows a replacement
            method to make call to the replaced method.</para>
            </summary>
            <param name="className">Name of the class to search.</param>
            <param name="selector">The selector of the method.</param>
            <returns>The native pointer of the implementation</returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.DumpCache">
            <summary>
            Show statistics about the Managed/Native mappings. Use for debugging purpose only.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.isKindOfClass(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Specific message used when testing for class equivalence.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessage(Monobjc.IManagedWrapper,System.String,System.Object[])">
            <summary>
                <para>Sends a message to an Objective-C receiver (either a Class or an object instance).</para>
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessage``1(Monobjc.IManagedWrapper,System.String,System.Object[])">
            <summary>
                <para>Sends a message to an Objective-C receiver (either a Class or an object instance).</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessageSuper(Monobjc.IManagedWrapper,Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of an Objective-C object instance.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessageSuper``1(Monobjc.IManagedWrapper,Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of an Objective-C object instance.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="receiver">The receiver.</param>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessage(Monobjc.IManagedWrapper,System.String)">
            <summary>
                <para>Sends a message to an Objective-C receiver (either a Class or an object instance).</para>
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessage``1(Monobjc.IManagedWrapper,System.String)">
            <summary>
                <para>Sends a message to an Objective-C receiver (either a Class or an object instance).</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessageSuper(Monobjc.IManagedWrapper,Monobjc.Class,System.String)">
            <summary>
                <para>Sends a message to the super instance of an Objective-C object instance.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessageSuper``1(Monobjc.IManagedWrapper,Monobjc.Class,System.String)">
            <summary>
                <para>Sends a message to the super instance of an Objective-C object instance.</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="receiver">The receiver.</param>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.objc_msgSend(System.IntPtr,System.IntPtr)">
            <summary>
            Fast-path call for message sending without arguments.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.objc_msgSendSuper(System.IntPtr,System.IntPtr)">
            <summary>
            Fast-path call for message sending to super without arguments.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessageVarArgs(Monobjc.IManagedWrapper,System.String,System.Object[])">
            <summary>
                <para>Sends a message to an Objective-C receiver (either a Class or an object instance).</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessageVarArgs``1(Monobjc.IManagedWrapper,System.String,System.Object[])">
            <summary>
                <para>Sends a message to an Objective-C receiver (either a Class or an object instance).</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="receiver">The receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessageSuperVarArgs(Monobjc.IManagedWrapper,Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of an Objective-C object instance.</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.SendMessageSuperVarArgs``1(Monobjc.IManagedWrapper,Monobjc.Class,System.String,System.Object[])">
            <summary>
                <para>Sends a message to the super instance of an Objective-C object instance.</para>
                <para>The last parameter passed must be an object array that contains the variable list of arguments</para>
                <para>Details for the construction of the <see cref="T:Monobjc.Runtime.objc_super" /> structure can be
            found here at http://www.omnigroup.com/mailman/archive/macosx-dev/2005-November/057962.html</para>
            </summary>
            <typeparam name="TReturnType">The type of the return type.</typeparam>
            <param name="receiver">The receiver.</param>
            <param name="cls">The class of the receiver.</param>
            <param name="selector">The selector.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.LoadLibrary(System.String,Monobjc.RuntimeLoadingOptions)">
            <summary>
            Loads a dynamic library using the Mac OS X ABI (Application Binary Interface).
            </summary>
            <param name="path">The path to the library to load.</param>
            <param name="options">The loading flags to use.</param>
            <exception cref="T:Monobjc.ObjectiveCException">If the library cannot be found</exception>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.LoadFramework(System.String)">
            <summary>
            Loads a Mac OS framework bundle by searching for the common places.
            </summary>
            <param name="name">The name of the framework to load.</param>
            <exception cref="T:Monobjc.ObjectiveCException">If the framework cannot be found</exception>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.InstallHandlers">
            <summary>
            Install custom signal handlers.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.InstallHandler(Monobjc.Signal)">
            <summary>
            Install custom signal handler.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.ErrorHandler(Monobjc.Signal)">
            <summary>
            Handle signal handling dispatching
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.GenerateMessage(Monobjc.Signal)">
            <summary>
            Generates the message with the reasons that could have lead to the raise of signal.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.Selector(System.String)">
            <summary>
            Returns the selector from the message name.
            </summary>
            <param name="selectorName">The selectorName.</param>
            <returns>A pointer to a selector</returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.Selector(System.IntPtr)">
            <summary>
            Returns the message name from the selector.
            </summary>
            <param name="selector">The selector.</param>
            <returns>A pointer to a selector</returns>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.LogSendMessage(System.String,Monobjc.IManagedWrapper,System.String)">
            <summary>
            Log to ouptut the details of a message sending.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.Initialize">
            <summary>
                <para>Initializes the .NET/Objective-C bridge with no class handler callback.</para>
                <para>This method must be called AFTER the loading of the native libraries (see <see cref="M:Monobjc.ObjectiveCRuntime.LoadLibrary(System.String,Monobjc.RuntimeLoadingOptions)" />) and
            BEFORE any use of the Objective-C classes.</para>
            </summary>
            <example>
                <para>The following code shows how to use the <see cref="M:Monobjc.ObjectiveCRuntime.Initialize" /> method:</para>
                <code>
            using System;
            using Monobjc;
            namespace MyApplication
            {
            internal class Program
            {
            public static int Main(String[] args)
            {
            ...
            ObjectiveCRuntime.LoadFramework("Cocoa");
            ObjectiveCRuntime.Initialize();
            ...
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.DumpDll">
            <summary>
            Save the generated code to files.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.DoNotScanAssembly(System.String)">
            <summary>
            Adds a specific assembly name to the already scanned assemblies list, preventing the runtime from scanning it for exported types when loaded.
            </summary>
            <param name="assemblyName">
            The name of the assembly (i.e. 'System.Remoting' is enough, no need for signing details).
            </param>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.ScanAssembly(System.Reflection.Assembly)">
            <summary>
            Scans the given assembly for new managed proxies.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.CurrentDomain_AssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Handles the AssemblyLoad event of the CurrentDomain control.
            </summary>
        </member>
        <member name="M:Monobjc.ObjectiveCRuntime.InitializeAssembliesToSkip">
            <summary>
            Initializes the assemblies to skip.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Monobjc.RuntimeLoadingOptions">
            <summary>
                <para>Flags to specify when the loaded image�s external symbols are bound to their definitions in dependent libraries (lazy or at load time) and the visibility of the image�s exported symbols (global or local). The value of this parameter is made up by ORing one binding behavior value with one visibility specification value.</para>
            </summary>
        </member>
        <member name="F:Monobjc.RuntimeLoadingOptions.Lazy">
            <summary>
            Each external symbol reference is bound the first time it�s used.
            </summary>
        </member>
        <member name="F:Monobjc.RuntimeLoadingOptions.Now">
            <summary>
            All external symbol references are bound immediately.
            </summary>
        </member>
        <member name="F:Monobjc.RuntimeLoadingOptions.Global">
            <summary>
            The loaded image�s exported symbols are available to any images that use a flat namespace or to calls to dlsym when using a special handle (see dlsym for details).
            </summary>
        </member>
        <member name="F:Monobjc.RuntimeLoadingOptions.Local">
            <summary>
            The loaded image�s exported symbols are generally hidden. They are available only to dlsym invocations that use the handle returned by this function.
            </summary>
        </member>
        <member name="T:Monobjc.SafeNativeMethods">
            <summary>
                <para>Exports native methods exposed in <c>libobjc.dylib</c> shared library.</para>
                <para>Thanks to .NET P/Invoke system, most of the marshalling work is automatic.</para>
                <para>The following methods are safe for use on both Mac OS X 10.4 et Mac OS X 10.5.</para>
            </summary>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.dlopen(System.String,Monobjc.RuntimeLoadingOptions)">
            <summary>
                <para>Loads and links a dynamic library or bundle.</para>
                <para>This function examines the Mach-O file specified by path. If the image is compatible with the current process and has not already been loaded into the process, the image is loaded and linked. If the image contains initializer functions, they are executed before this function returns.</para>
                <para>Subsequent calls to dlopen to load the same image return the same handle, but the internal reference count for the handle is incremented. Therefore, all dlopen calls must be balanced with dlclose calls.</para>
                <para>For efficiency, the RTLD_LAZY binding mode is preferred over RTLD_NOW. However, using RTLD_NOW ensures that any undefined symbols are discovered during the call to dlopen.</para>
                <para>The dynamic loader looks in the paths specified by a set of environment variables, and in the process�s current directory, when it searches for a library. These paths are called dynamic loader search paths. The environment variables are LD_LIBRARY_PATH, DYLD_LIBRARY_PATH, and DYLD_FALLBACK_LIBRARY_PATH. The default value of DYLD_FALLBACK_LIBRARY_PATH (used when this variable is not set), is $HOME/lib;/usr/local/lib;/usr/lib.</para>
                <para>The order in which the search paths are searched depends on whether path is a filename (it does not contain a slash) or a pathname (it contains at least one slash).</para>
                <para>When path is a filename, the dynamic loader searches for the library in the search paths in the following order:
            <list type="number"><item>$LD_LIBRARY_PATH</item><item>$DYLD_LIBRARY_PATH</item><item>The process�s working directory</item><item>$DYLD_FALLBACK_LIBRARY_PATH</item></list></para>
                <para>When path is a pathname, the dynamic loader searches for the library in the search paths in the following order:
            <list type="number"><item>$DYLD_LIBRARY_PATH</item><item>The given pathname</item><item>$DYLD_FALLBACK_LIBRARY_PATH using the filename</item></list></para>
                <para>If this function cannot open an image, it sets an error condition that can be accessed with dlerror.</para>
                <para>The original declaration is :
            <code>
            void* dlopen(const char* path, int mode);
            </code></para>
            </summary>
            <param name="path">Path to the image to open.</param>
            <param name="type">Specifies when the loaded image�s external symbols are bound to their definitions in dependent libraries (lazy or at load time) and the visibility of the image�s exported symbols (global or local). The value of this parameter is made up by ORing one binding behavior value with one visibility specification value. The following values specify the binding behavior:
            <list type="bullet"><item>RTLD_LAZY (default): Each external symbol reference is bound the first time it�s used.</item><item>RTLD_NOW: All external symbol references are bound immediately.</item></list>
            The following values specify external symbol visibility:
            <list type="bullet"><item>RTLD_GLOBAL (default): The loaded image�s exported symbols are available to any images that use a flat namespace or to calls to dlsym when using a special handle (see dlsym for details).</item><item>RTLD_LOCAL: The loaded image�s exported symbols are generally hidden. They are available only to dlsym invocations that use the handle returned by this function.</item></list></param>
            <returns>A handle that can be used with calls to dlsym and dlclose.</returns>
            <remarks>For more details, see the Mac OS X ABI Dynamic Loader Reference (http://developer.apple.com/documentation/DeveloperTools/Reference/MachOReference/index.html).</remarks>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.dlerror">
            <summary>
                <para>Get diagnostic information.</para>
                <para>dlerror() returns a null-terminated character string describing the last error that occurred on this thread during a call to dlopen(), dlsym(), or dlclose(). If no such error has occurred, dlerror() returns a null pointer. At each call to dlerror(), the error indication is reset. Thus in the case of two calls to dlerror(), where the second call follows the first immediately, the second call will always return a null pointer.</para>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.SigAction(Monobjc.Signal,System.IntPtr,System.IntPtr)">
            <summary>
                <para>Assign a hander when a signal is raised.</para>
            </summary>
            <param name="sig">The signal.</param>
            <param name="act">A structure describing the desired handling.</param>
            <param name="oact">If not null, contains the old structure on return.</param>
            <returns>Returns 0 if the signal handler was successfully installed.</returns>
        </member>
        <member name="M:Monobjc.SafeNativeMethods._NSGetExecutablePath(System.Text.StringBuilder,System.UInt32@)">
            <summary>
                <para>Copies the path of the main executable into the buffer buf. The bufsize parameter should initially be the size of the buffer.</para>
                <para>Note that _NSGetExecutablePath() will return a path to the executable not a real path to the executable. That is, the path may be a symbolic link and not the real file. With deep directories the total bufsize needed could be more than MAXPATHLEN.</para>
                <param name="buf">The buffer</param>
                <param name="bufsize">The buffer size. It should initially be the size of the buffer.</param>
            </summary>
            <returns>This function returns 0 if the path was successfully copied. It returns -1 if the buffer is not large enough, and * bufsize is set to the size required.</returns>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.NXGetLocalArchInfo">
            <summary>
                <para>Returns the <see cref="T:Monobjc.Runtime.NXArchInfo" /> for the local host, or null if none is known.</para>
            </summary>
            <returns>A pointer to a <see cref="T:Monobjc.Runtime.NXArchInfo" /> structure.</returns>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.class_getClassMethod(System.IntPtr,System.IntPtr)">
            <summary>
                <para>Returns a pointer to the data structure describing a given class method for a given class.</para>
                <para>Note that this function searches superclasses for implementations.</para>
                <para>The original declaration is :
            <code>
            Method class_getClassMethod(Class aClass, SEL aSelector)
            </code></para>
            </summary>
            <param name="aClass">A pointer to a class definition. Pass the class that contains the method you want to retrieve.</param>
            <param name="aSelector">A pointer of type SEL. Pass the selector of the method you want to retrieve.</param>
            <returns>
            A pointer to the Method data structure that corresponds to the implementation of the selector specified by aSelector for the class specified by aClass, or NULL if the specified class or its superclasses do not contain an instance method with the specified selector.
            </returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.class_getInstanceMethod(System.IntPtr,System.IntPtr)">
            <summary>
                <para>Returns a specified instance method for a given class.</para>
                <para>Note that this function searches superclasses for implementations.</para>
                <para>The original declaration is :
            <code>
            Method class_getInstanceMethod(Class aClass, SEL aSelector)
            </code></para>
            </summary>
            <param name="aClass">The class you want to inspect.</param>
            <param name="aSelector">The selector of the method you want to retrieve.</param>
            <returns>
            The method that corresponds to the implementation of the selector specified by aSelector for the class specified by aClass, or NULL if the specified class or its superclasses do not contain an instance method with the specified selector.
            </returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.objc_getClass(System.String)">
            <summary>
                <para>Returns a pointer to the class definition of the specified class.</para>
                <para>If the specified class is not registered with the Objective-C runtime, <see cref="M:Monobjc.SafeNativeMethods.objc_getClass(System.String)" /> returns nil.</para>
                <para>
                    <see cref="M:Monobjc.SafeNativeMethods.objc_getClass(System.String)" /> is different from <see cref="M:Monobjc.SafeNativeMethods.objc_lookUpClass(System.String)" /> in that if the class is not registered, <see cref="M:Monobjc.SafeNativeMethods.objc_getClass(System.String)" /> calls the class handler callback and then checks a second time to see whether the class is registered. <see cref="M:Monobjc.SafeNativeMethods.objc_lookUpClass(System.String)" /> does not call the class handler callback.</para>
                <para>The original declaration is :
            <code>
            id objc_getClass(const char *aClassName)
            </code></para>
            </summary>
            <param name="aClassName">A C string. Pass the name of the class to look up.</param>
            <returns>An id pointing to the Class object for the named class, or nil if the class is not registered with the Objective-C runtime.</returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.objc_lookUpClass(System.String)">
            <summary>
                <para>Returns a pointer to the class definition of the specified class.</para>
                <para>If the specified class is not registered with the Objective-C runtime, this function returns nil.</para>
                <para>
                    <see cref="M:Monobjc.SafeNativeMethods.objc_getClass(System.String)" /> is different from this function in that if the class is not registered, <see cref="M:Monobjc.SafeNativeMethods.objc_getClass(System.String)" /> calls the class handler callback and then checks a second time to see whether the class is registered. This function does not call the class handler callback.</para>
                <para>The original declaration is :
            <code>
            id objc_lookUpClass(const char *aClassName)
            </code></para>
            </summary>
            <param name="aClassName">A C string. Pass the name of the class to look up.</param>
            <returns>An id pointing to the Class object for the named class, or nil if the class is not registered with the Objective-C runtime.</returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.object_getInstanceVariable(System.IntPtr,System.String,System.IntPtr)">
            <summary>
                <para>Obtains the value of an instance variable of a class instance.</para>
                <para>The original declaration is :
            <code>
            Ivar object_getInstanceVariable(id object, const char *name, void  **value);
            </code></para>
            </summary>
            <param name="target">A pointer to an instance of a class. Pass the object containing the instance variable whose value you wish to obtain.</param>
            <param name="name">A C string. Pass the name of the instance variable whose value you wish to obtain.</param>
            <param name="value">A pointer to a pointer to a value. On output, contains a pointer to the value of the instance variable.</param>
            <returns>A pointer to the objc_ivar data structure that defines the type and name of the instance variable specified by name.</returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.object_setInstanceVariable(System.IntPtr,System.String,System.IntPtr)">
            <summary>
                <para>Changes the value of an instance variable of a class instance.</para>
                <para>The original declaration is :
            <code>
            Ivar object_setInstanceVariable(id object, const char *name, void  *value);
            </code></para>
            </summary>
            <param name="target">A pointer to an instance of a class. Pass the object containing the instance variable whose value you wish to modify.</param>
            <param name="name">A C string. Pass the name of the instance variable whose value you wish to modify.</param>
            <param name="value">A pointer to a value. Pass a pointer to the new value for the instance variable.</param>
            <returns>A pointer to the objc_ivar data structure that defines the type and name of the instance variable specified by name.</returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.sel_getName(System.IntPtr)">
            <summary>
                <para>Returns the name of the method specified by the selector.</para>
                <para>This function is one of two ways to retrieve the name of a selector. You can also cast a selector pointer directly to a C string pointer (const char *), but you cannot use an arbitrary C string as a selector because selectors are C strings that are indexed by pointer. See SEL for more information.</para>
                <para>The original declaration is :
            <code>
            const char* sel_getName(SEL aSelector)
            </code></para>
            </summary>
            <param name="aSelector">A pointer of type SEL. Pass the selector whose name you wish to determine.</param>
            <returns>A C string indicating the name of the selector.</returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.sel_registerName(System.String)">
            <summary>
                <para>Registers a method with the Objective-C runtime system, maps the method name to a selector, and returns the selector value.</para>
                <para>You must register a method name with the Objective-C runtime system to obtain the method�s selector before you can add the method to a class definition. If the method name has already been registered, this function simply returns the selector.</para>
                <para>The original declaration is :
            <code>
            SEL sel_registerName(const char *str);
            </code></para>
            </summary>
            <param name="str">A pointer to a C string. Pass the name of the method you wish to register.</param>
            <returns>A pointer of type SEL specifying the selector for the named method.</returns>
            <remarks>For more details, see the Objective-C Runtime Reference (http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/ObjectiveCRuntimeRef/index.html).</remarks>
        </member>
        <member name="M:Monobjc.SafeNativeMethods.Gestalt(System.Int32,System.Int32@)">
            <summary>
            Obtains information about the operating environment.
            </summary>
            <param name="selector">The selector code for the information you need. You can provide any of the four-character sequences defined in "Gestalt Manager Constants."</param>
            <param name="response">On input, Gestalt interprets this parameter as an address at which it is to place the result returned by the selector function. Gestalt ignores any information already at this address.
            On return, a pointer to the requested information whose format depends on the selector code specified in the selector parameter. Note that the Gestalt function returns the response from all selectors in a long word, which occupies 4 bytes. When not all 4 bytes are needed, the significant information appears in the low-order byte or bytes.</param>
            <returns>A result code.</returns>
        </member>
        <member name="T:Monobjc.Signal">
            <summary>
            Enumeration of BSD system's signals
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGHUP">
            <summary>
                <para>Terminal line hangup</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGINT">
            <summary>
                <para>Interrupt program</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGQUIT">
            <summary>
                <para>Quit program</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGILL">
            <summary>
                <para>Illegal instruction</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGTRAP">
            <summary>
                <para>Trace trap</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGABRT">
            <summary>
                <para>Abort program (formerly SIGIOT)</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGEMT">
            <summary>
                <para>Emulate instruction executed</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGFPE">
            <summary>
                <para>Floating-point exception</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGKILL">
            <summary>
                <para>Kill program</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGBUS">
            <summary>
                <para>Bus error</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGSEGV">
            <summary>
                <para>Segmentation violation</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGSYS">
            <summary>
                <para>Non-existent system call invoked</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGPIPE">
            <summary>
                <para>Write on a pipe with no reader</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGALRM">
            <summary>
                <para>Real-time timer expired</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGTERM">
            <summary>
                <para>Software termination signal</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGURG">
            <summary>
                <para>Urgent condition present on socket</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGSTOP">
            <summary>
                <para>Stop (cannot be caught or ignored)</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGTSTP">
            <summary>
                <para>Stop signal generated from keyboard</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGCONT">
            <summary>
                <para>Continue after stop</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGCHLD">
            <summary>
                <para>Child status has changed</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGTTIN">
            <summary>
                <para>Background read attempted from control terminal</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGTTOU">
            <summary>
                <para>Background write attempted to control terminal</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGIO">
            <summary>
                <para>I/O is possible on a descriptor</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGXCPU">
            <summary>
                <para>CPU time limit exceeded</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGXFSZ">
            <summary>
                <para>File size limit exceeded</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGVTALRM">
            <summary>
                <para>Virtual time alarm</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGPROF">
            <summary>
                <para>Profiling timer alarm</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGWINCH">
            <summary>
                <para>Window size change</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGINFO">
            <summary>
                <para>Status request from keyboard</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGUSR1">
            <summary>
                <para>User defined signal 1</para>
            </summary>
        </member>
        <member name="F:Monobjc.Signal.SIGUSR2">
            <summary>
                <para>User defined signal 2</para>
            </summary>
        </member>
        <member name="T:Monobjc.SignalActionDescriptor">
            <summary>
                <para>Structure that holds the signal handling preference.</para>
            </summary>
        </member>
        <member name="F:Monobjc.SignalActionDescriptor.sa_handler">
            <summary>
            The signal handler
            </summary>
        </member>
        <member name="F:Monobjc.SignalActionDescriptor.sa_mask">
            <summary>
            The signal mask
            </summary>
        </member>
        <member name="F:Monobjc.SignalActionDescriptor.sa_flags">
            <summary>
            The processing flags
            </summary>
        </member>
        <member name="T:Monobjc.SignalException">
            <summary>
            Exception raised if a system signal is raised.
            </summary>
        </member>
        <member name="M:Monobjc.SignalException.#ctor(Monobjc.Signal)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.SignalException" /> class.
            </summary>
            <param name="signal">The signal.</param>
        </member>
        <member name="M:Monobjc.SignalException.#ctor(Monobjc.Signal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.SignalException" /> class.
            </summary>
            <param name="signal">The signal.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Monobjc.SignalException.#ctor(Monobjc.Signal,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.SignalException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Monobjc.SignalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.SignalException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
        </member>
        <member name="P:Monobjc.SignalException.Signal">
            <summary>
            Gets the signal raised.
            </summary>
            <value>The signal.</value>
        </member>
        <member name="T:Monobjc.SignalExceptionEventArgs">
            <summary>
            Holds the signal raised.
            </summary>
        </member>
        <member name="M:Monobjc.SignalExceptionEventArgs.#ctor(Monobjc.SignalException)">
            <summary>
            Initializes a new instance of the <see cref="T:Monobjc.SignalExceptionEventArgs" /> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Monobjc.SignalExceptionEventArgs.ExceptionObject">
            <summary>
            Gets the exception object.
            </summary>
            <value>The exception object.</value>
        </member>
        <member name="T:Monobjc.Bridge.Generators.PlatformInvokeNoArgs">
            <summary>
            Generic delegate used to invoke messaging methods.
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Generators.PlatformInvokeNoArgs`1">
            <summary>
            Generic delegate used to invoke messaging methods that return a value.
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Generators.PlatformInvokeArgs">
            <summary>
            Generic delegate used to invoke messaging methods.
            </summary>
        </member>
        <member name="T:Monobjc.Bridge.Generators.PlatformInvokeArgs`1">
            <summary>
            Generic delegate used to invoke messaging methods that return a value.
            </summary>
        </member>
        <member name="T:Monobjc.SignalActionHandler">
            <summary>
            Delegate to receive system's signals callback.
            </summary>
        </member>
    </members>
</doc>
