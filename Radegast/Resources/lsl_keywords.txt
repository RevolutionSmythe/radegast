# $Id$
# sections
[word .5, .1, .3]
default 		Name of default state that all scripts must have
state 			Keyword to indicate state block or state transition

# data types
[word .1, .3, .1]
integer			Integer type
float			Floating-point type
string			String type
key				Key type.  Use NULL_KEY to test for empty keys.
vector			Vector type of 3 floats.  Used to represent 3D motion, Euler angles, and color.:Access components by .x, .y. or .z
rotation		Rotation type of 4 floats.  Used to represent rotation.:Access components by .x, .y., .z, or .w
list			List of various data types

# events
[word 0, .3, .5]
state_entry		state_entry():Triggered on any state transition and startup
state_exit		state_exit():Triggered on any state transition
touch_start		touch_start(integer num_detected):Triggered by the start of agent clicking on task
touch			touch(integer num_detected):Triggered while agent is clicking on task
touch_end		touch_end(integer num_detected):Triggered when agent stops clicking on task
collision_start collision_start(integer num_detected):Triggered when task starts colliding with another task
collision		collision(integer num_detected):Triggered while task is colliding with another task
collision_end	collision_end(integer num_detected):Triggered when task stops colliding with another task
land_collision_start	land_collision_start(vector pos):Triggered when task starts colliding with land
land_collision			land_collision(vector pos):Triggered when task is colliding with land
land_collision_end		land_collision_end(vector pos):Triggered when task stops colliding with land
timer			timer():Result of the llSetTimerEvent library function call.
listen			listen(integer channel, string name, key id, string message):Result of the llListen library function call
sensor			sensor(integer num_detected):Result of the llSensor library function call
no_sensor		no_sensor():Result of the llSensor library function call
control			control(key id, integer level, integer edge):Result of llTakeControls library function call
at_target		at_target(integer tnum, vector targetpos, vector ourpos):Result of llTarget library function call
not_at_target	not_at_target():Result of llTarget library function call
at_rot_target	at_rot_target(integer tnum, rotation targetrot, rotation ourrot):Result of LLRotTarget library function call
not_at_rot_target	not_at_rot_target():Result of LLRotTarget library function call
money			money(key id, integer amount):Triggered when L$ is given to task
email			email(string time, string address, string subj, string message, integer num_left):Triggered when task receives email
run_time_permissions	run_time_permissions(integer perm):Triggered when an agent grants run time permissions to task
attach			attach(key id):Triggered when an agent attaches or detaches from agent
dataserver      dataserver(key queryid, string data):Triggered when task receives asynchronous data
moving_start	moving_start():Triggered when task begins moving
moving_end		moving_end():Triggered when task stops moving
on_rez			on_rez(integer start_param):Triggered when task is rezed in from inventory or another task
object_rez		object_rez(key id):Triggered when task rezes in another task
link_message	link_message(integer sender_num, integer num, string str, key id):Triggered when task receives a link message via LLMessageLinked library function call
changed			changed( integer change ):Triggered various event change the task:(test change with CHANGED_INVENTORY, CHANGED_COLOR, CHANGED_SHAPE, CHANGED_SCALE, CHANGED_TEXTURE, CHANGED_LINK, CHANGED_ALLOWED_DROP, CHANGED_OWNER, CHANGED_REGION, CHANGED_TELEPORT)
remote_data     remote_data(integer event_type, key channel, key message_id, string sender,integer idata, string sdata):Triggered by various XML-RPC calls (event_type will be one of REMOTE_DATA_CHANNEL, REMOTE_DATA_REQUEST, REMOTE_DATA_REPLY)
http_response   http_response(key request_id, integer status, list metadata, string body):Triggered when task receives a response to one of its llHTTPRequests
http_request	http_request(key id, string method, string body):Triggered when task receives an http request against a public URL

# integer constants
[word .1, .1, .5]
TRUE			Integer constant for Boolean operations
FALSE			Integer constant for Boolean operations
STATUS_PHYSICS	Passed in the llSetStatus library function.  If TRUE, object moves physically
STATUS_PHANTOM	Passed in the llSetStatus library function.  If TRUE, object doesn't collide with other objects
STATUS_ROTATE_X Passed in the llSetStatus library function.  If FALSE, object doesn't rotate around local X axis
STATUS_ROTATE_Y Passed in the llSetStatus library function.  If FALSE, object doesn't rotate around local Y axis
STATUS_ROTATE_Z Passed in the llSetStatus library function.  If FALSE, object doesn't rotate around local Z axis
STATUS_SANDBOX	Passed in the llSetStatus library function.  If TRUE, object can't cross region boundaries or move more than 10 meters from its start location
STATUS_BLOCK_GRAB Passed in the llSetStatus library function.  If TRUE, object can't be grabbed and physically dragged
STATUS_DIE_AT_EDGE Passed in the llSetStatus library function.  If TRUE, objects that reach the edge of the world just die:rather than teleporting back to the owner
STATUS_RETURN_AT_EDGE Passed in the llSetStatus library function.  If TRUE, script rezzed objects that reach the edge of the world:are returned rather than killed:STATUS_RETURN_AT_EDGE trumps STATUS_DIE_AT_EDGE if both are set
STATUS_CAST_SHADOWS	Passed in the llSetStatus library function.  If TRUE, object casts shadows on other objects
AGENT			Passed in llSensor library function to look for other Agents
ACTIVE			Passed in llSensor library function to look for moving objects
PASSIVE			Passed in llSensor library function to look for objects that aren't moving
SCRIPTED		Passed in llSensor library function to look for scripted objects
CONTROL_FWD		Passed to llTakeControls library function and used control event handler to test for agent forward control
CONTROL_BACK	Passed to llTakeControls library function and used control event handler to test for agent back control
CONTROL_LEFT	Passed to llTakeControls library function and used control event handler to test for agent left control
CONTROL_RIGHT	Passed to llTakeControls library function and used control event handler to test for agent right control
CONTROL_ROT_LEFT				Passed to llTakeControls library function and used control event handler to test for agent rotate left control
CONTROL_ROT_RIGHT				Passed to llTakeControls library function and used control event handler to test for agent rotate right control
CONTROL_UP						Passed to llTakeControls library function and used control event handler to test for agent up control
CONTROL_DOWN					Passed to llTakeControls library function and used control event handler to test for agent down control
CONTROL_LBUTTON					Passed to llTakeControls library function and used control event handler to test for agent left button control
CONTROL_ML_LBUTTON				Passed to llTakeControls library function and used control event handler to test for agent left button control with the agent in mouse look
PERMISSION_DEBIT				Passed to llRequestPermissions library function to request permission to take L$ from agent's account
PERMISSION_TAKE_CONTROLS		Passed to llRequestPermissions library function to request permission to take agent's controls
# PERMISSION_REMAP_CONTROLS		Passed to llRequestPermissions library function to request permission to remap agent's controls (not implemented yet)
PERMISSION_TRIGGER_ANIMATION	Passed to llRequestPermissions library function to request permission to trigger animation on agent
PERMISSION_ATTACH				Passed to llRequestPermissions library function to request permission to attach/detach from agent
# PERMISSION_RELEASE_OWNERSHIP	Passed to llRequestPermissions library function to request permission to release ownership (not implemented)
PERMISSION_CHANGE_LINKS			Passed to llRequestPermissions library function to request permission to change links
# PERMISSION_CHANGE_JOINTS		Passed to llRequestPermissions library function to request permission to change joints (not implemented)
# PERMISSION_CHANGE_PERMISSIONS Passed to llRequestPermissions library function to request permission to change permissions
PERMISSION_TRACK_CAMERA			Passed to llRequestPermissions library function to request permission to track agent's camera
PERMISSION_CONTROL_CAMERA		Passed to llRequestPermissions library function to request permission to change agent's camera

DEBUG_CHANNEL		Chat channel reserved for debug and error messages from scripts
PUBLIC_CHANNEL		Chat channel that broadcasts to all nearby users

AGENT_FLYING		Returned by llGetAgentInfo if the Agent is flying
AGENT_ATTACHMENTS	Returned by llGetAgentInfo if the Agent has attachments
AGENT_SCRIPTED		Returned by llGetAgentInfo if the Agent has scripted attachments
AGENT_SITTING		Returned by llGetAgentInfo if the Agent is sitting
AGENT_ON_OBJECT		Returned by llGetAgentInfo if the Agent is sitting on an object
AGENT_MOUSELOOK		Returned by llGetAgentInfo if the Agent is in mouselook
AGENT_AWAY			Returned by llGetAgentInfo if the Agent is in away mode
AGENT_WALKING		Returned by llGetAgentInfo if the Agent is walking
AGENT_IN_AIR		Returned by llGetAgentInfo if the Agent is in the air
AGENT_TYPING		Returned by llGetAgentInfo if the Agent is typing
AGENT_CROUCHING		Returned by llGetAgentInfo if the Agent is crouching
AGENT_BUSY			Returned by llGetAgentInfo if the Agent is busy
AGENT_ALWAYS_RUN	Returned by llGetAgentInfo if the Agent has 'Always Run' enabled

PSYS_PART_FLAGS
PSYS_PART_START_COLOR
PSYS_PART_START_ALPHA
PSYS_PART_START_SCALE
PSYS_PART_END_COLOR
PSYS_PART_END_ALPHA
PSYS_PART_END_SCALE
PSYS_PART_MAX_AGE

PSYS_PART_BOUNCE_MASK
PSYS_PART_WIND_MASK
PSYS_PART_INTERP_COLOR_MASK
PSYS_PART_INTERP_SCALE_MASK
PSYS_PART_FOLLOW_SRC_MASK
PSYS_PART_FOLLOW_VELOCITY_MASK
PSYS_PART_TARGET_POS_MASK
PSYS_PART_EMISSIVE_MASK
PSYS_PART_TARGET_LINEAR_MASK

PSYS_SRC_PATTERN
PSYS_SRC_INNERANGLE	Deprecated -- Use PSYS_SRC_ANGLE_BEGIN
PSYS_SRC_OUTERANGLE	Deprecated -- Use PSYS_SRC_ANGLE_END
PSYS_SRC_ANGLE_BEGIN
PSYS_SRC_ANGLE_END
PSYS_SRC_BURST_RATE
PSYS_SRC_BURST_PART_COUNT
PSYS_SRC_BURST_RADIUS
PSYS_SRC_BURST_SPEED_MIN
PSYS_SRC_BURST_SPEED_MAX
PSYS_SRC_MAX_AGE
PSYS_SRC_ACCEL
PSYS_SRC_TEXTURE
PSYS_SRC_TARGET_KEY
PSYS_SRC_OMEGA

PSYS_SRC_PATTERN_DROP
PSYS_SRC_PATTERN_EXPLODE
PSYS_SRC_PATTERN_ANGLE
PSYS_SRC_PATTERN_ANGLE_CONE
PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY

OBJECT_UNKNOWN_DETAIL	Returned by llGetObjectDetails when passed an invalid object parameter type.
OBJECT_NAME				Used with llGetObjectDetails to get an object's name.
OBJECT_DESC				Used with llGetObjectDetails to get an object's description.
OBJECT_POS				Used with llGetObjectDetails to get an object's position.
OBJECT_ROT				Used with llGetObjectDetails to get an object's rotation.
OBJECT_VELOCITY			Used with llGetObjectDetails to get an object's velocity.
OBJECT_OWNER			Used with llGetObjectDetails to get an object's owner's key.  Will be NULL_KEY if group owned.
OBJECT_GROUP			Used with llGetObjectDetails to get an object's group's key.
OBJECT_CREATOR			Used with llGetObjectDetails to get an object's creator's key.

# some vehicle params
VEHICLE_TYPE_NONE
VEHICLE_TYPE_SLED
VEHICLE_TYPE_CAR
VEHICLE_TYPE_BOAT
VEHICLE_TYPE_AIRPLANE
VEHICLE_TYPE_BALLOON

VEHICLE_REFERENCE_FRAME		Rotation of vehicle axes relative to local frame

VEHICLE_LINEAR_FRICTION_TIMESCALE 	A vector of timescales for exponential decay of linear velocity along the three vehicle axes
VEHICLE_ANGULAR_FRICTION_TIMESCALE	A vector of timescales for exponential decay of angular velocity about the three vehicle axes
VEHICLE_LINEAR_MOTOR_DIRECTION		The linear velocity that the vehicle will try to achieve
VEHICLE_LINEAR_MOTOR_OFFSET			An offset from the center of mass of the vehicle where the linear motor is applied
VEHICLE_ANGULAR_MOTOR_DIRECTION		The angular velocity that the vehicle will try to achieve

VEHICLE_HOVER_HEIGHT		The height the vehicle will try to hover
VEHICLE_HOVER_EFFICIENCY	A slider between 0 (bouncy) and 1 (critically damped) hover behavior
VEHICLE_HOVER_TIMESCALE		The period of time for the vehicle to achieve its hover height
VEHICLE_BUOYANCY			A slider between 0 (no anti-gravity) and 1 (full anti-gravity)

VEHICLE_LINEAR_DEFLECTION_EFFICIENCY	A slider between 0 (no deflection) and 1 (maximum strength)
VEHICLE_LINEAR_DEFLECTION_TIMESCALE		The exponential timescale for the vehicle to redirect its velocity to be along its x-axis

VEHICLE_LINEAR_MOTOR_TIMESCALE			The exponential timescale for the vehicle to achive its full linear motor velocity
VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE	The exponential timescale for the linear motor's effectiveness to decay toward zero

VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY	A slider between 0 (no deflection) and 1 (maximum strength)
VEHICLE_ANGULAR_DEFLECTION_TIMESCALE	The exponential timescale for the vehicle to achieve full angular deflection

VEHICLE_ANGULAR_MOTOR_TIMESCALE			The exponential timescale for the vehicle to achive its full angular motor velocity
VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE	The exponential timescale for the angular motor's effectiveness to decay toward zero

VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY	A slider between 0 (bouncy) and 1 (critically damped) attraction of vehicle z-axis to world z-axis (vertical)
VEHICLE_VERTICAL_ATTRACTION_TIMESCALE	The exponential timescale for the vehicle to align its z-axis to the world z-axis (vertical)

VEHICLE_BANKING_EFFICIENCY	A slider between -1 (leans out of turns), 0 (no banking), and +1 (leans into turns)
VEHICLE_BANKING_MIX			A slider betwen 0 (static banking) and 1 (dynamic banking)
VEHICLE_BANKING_TIMESCALE	The exponential timescale for the banking behavior to take full effect

VEHICLE_FLAG_NO_DEFLECTION_UP	Prevents linear deflection along world-z axis
VEHICLE_FLAG_LIMIT_ROLL_ONLY	Removes vertical attraction for changes in vehicle pitch
VEHICLE_FLAG_HOVER_WATER_ONLY	Hover only pays attention to water level
VEHICLE_FLAG_HOVER_TERRAIN_ONLY	Hover only pays attention to terrain height
VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT Hover only pays attention to global height
VEHICLE_FLAG_HOVER_UP_ONLY 		Hover only pushes up
VEHICLE_FLAG_LIMIT_MOTOR_UP		Prevents ground vehicles from motoring into the sky
VEHICLE_FLAG_MOUSELOOK_STEER	Makes vehicle try to turn toward mouselook direction.
VEHICLE_FLAG_MOUSELOOK_BANK		Makes vehicle try to turn toward mouselook direction assuming banking is enabled.
VEHICLE_FLAG_CAMERA_DECOUPLED 	Causes the camera look-at axis to NOT move when the vehicle rotates.

CAMERA_PITCH				(-45 to 80) (Adjusts the angular amount that the camera aims straight ahead vs. straight down, maintaining the same distance. Analogous to 'incidence'.")
CAMERA_FOCUS_OFFSET			(-10 to 10) A vector that adjusts the position of the camera focus position relative to the subject
CAMERA_POSITION_LAG			(0.0 to 3.0)  How much the camera lags as it tries to move towards its 'ideal' position
CAMERA_FOCUS_LAG			(0.0 to 3.0) How much the camera lags as it tries to aim towards the subject
CAMERA_DISTANCE				(0.5 to 10) Sets how far away the camera wants to be from its subject
CAMERA_BEHINDNESS_ANGLE		(0 to 180) Sets the angle in degrees within which the camera is not constrained by changes in subject rotation
CAMERA_BEHINDNESS_LAG		(0.0 to 3.0) Sets how strongly the camera is forced to stay behind the target if outside of behindness angle
CAMERA_POSITION_THRESHOLD	(0.0 to 4.0) Sets the radius of a sphere around the camera's ideal position within which it is not affected by subject motion
CAMERA_FOCUS_THRESHOLD		(0.0 to 4.0) Sets the radius of a sphere around the camera's subject position within which its focus is not affected by subject motion
CAMERA_ACTIVE				(0 or 1) Turns on or off scripted control of the camera
CAMERA_POSITION				Sets the position of the camera
CAMERA_FOCUS				Sets the focus (target position) of the camera
CAMERA_POSITION_LOCKED		(0 or 1) Locks the camera position so it will not move
CAMERA_FOCUS_LOCKED			(0 or 1) Locks the camera focus so it will not move

INVENTORY_TEXTURE	Passed to task inventory library functions to reference textures
INVENTORY_SOUND		Passed to task inventory library functions to reference sounds
INVENTORY_OBJECT	Passed to task inventory library functions to reference objects
INVENTORY_SCRIPT	Passed to task inventory library functions to reference scripts
INVENTORY_LANDMARK	Passed to task inventory library functions to reference landmarks
INVENTORY_CLOTHING	Passed to task inventory library functions to reference clothing
INVENTORY_NOTECARD	Passed to task inventory library functions to reference notecards
INVENTORY_BODYPART	Passed to task inventory library functions to reference body parts
INVENTORY_ANIMATION	Passed to task inventory library functions to reference animations
INVENTORY_GESTURE	Passed to task inventory library functions to reference gestures
INVENTORY_ALL		Passed to task inventory library functions to reference all inventory items
INVENTORY_NONE		Returned by llGetInventoryType when no item is found.

ATTACH_CHEST		Passed to llAttachToAvatar to attach task to chest
ATTACH_HEAD			Passed to llAttachToAvatar to attach task to head
ATTACH_LSHOULDER	Passed to llAttachToAvatar to attach task to left shoulder
ATTACH_RSHOULDER	Passed to llAttachToAvatar to attach task to right shoulder
ATTACH_LHAND		Passed to llAttachToAvatar to attach task to left hand
ATTACH_RHAND		Passed to llAttachToAvatar to attach task to right hand
ATTACH_LFOOT		Passed to llAttachToAvatar to attach task to left foot
ATTACH_RFOOT		Passed to llAttachToAvatar to attach task to right foot
ATTACH_BACK			Passed to llAttachToAvatar to attach task to back
ATTACH_PELVIS		Passed to llAttachToAvatar to attach task to pelvis
ATTACH_MOUTH		Passed to llAttachToAvatar to attach task to mouth
ATTACH_CHIN			Passed to llAttachToAvatar to attach task to chin
ATTACH_LEAR			Passed to llAttachToAvatar to attach task to left ear
ATTACH_REAR			Passed to llAttachToAvatar to attach task to right ear
ATTACH_LEYE			Passed to llAttachToAvatar to attach task to left eye
ATTACH_REYE			Passed to llAttachToAvatar to attach task to right eye
ATTACH_NOSE			Passed to llAttachToAvatar to attach task to noce
ATTACH_RUARM		Passed to llAttachToAvatar to attach task to right upper arm
ATTACH_RLARM		Passed to llAttachToAvatar to attach task to right lower arm
ATTACH_LUARM		Passed to llAttachToAvatar to attach task to left upper arm
ATTACH_LLARM		Passed to llAttachToAvatar to attach task to left lower arm
ATTACH_RHIP			Passed to llAttachToAvatar to attach task to right hip
ATTACH_RULEG		Passed to llAttachToAvatar to attach task to right upper leg
ATTACH_RLLEG		Passed to llAttachToAvatar to attach task to right lower leg
ATTACH_LHIP			Passed to llAttachToAvatar to attach task to left hip
ATTACH_LULEG		Passed to llAttachToAvatar to attach task to left upper leg
ATTACH_LLLEG		Passed to llAttachToAvatar to attach task to left lower leg
ATTACH_BELLY		Passed to llAttachToAvatar to attach task to belly
ATTACH_RPEC			Passed to llAttachToAvatar to attach task to right pectoral
ATTACH_LPEC			Passed to llAttachToAvatar to attach task to left pectoral

LAND_LEVEL			Passed to llModifyLand to level terrain
LAND_RAISE			Passed to llModifyLand to raise terrain
LAND_LOWER			Passed to llModifyLand to lower terrain
LAND_SMOOTH			Passed to llModifyLand to smooth terrain
LAND_NOISE			Passed to llModifyLand to randomize terrain
LAND_REVERT			Passed to llModifyLand to revert terrain toward original state
LAND_SMALL_BRUSH	Passed to llModifyLand to modify small land areas
LAND_MEDIUM_BRUSH	Passed to llModifyLand to modify medium land areas
LAND_LARGE_BRUSH	Passed to llModifyLand to modify large land areas

DATA_PAYINFO		Passed to llRequestAgentData to get payment status of an agent
DATA_ONLINE			Passed to llRequestAgentData to determine if agent is online
DATA_NAME			Passed to llRequestAgentData to get full agent name
DATA_BORN			Passed to llRequestAgentData to get born on date as a string
DATA_RATING			Passed to llRequestAgentData to get a comma separated sting of integer ratings
DATA_SIM_POS		Passed to llRequestSimulatorData to get a string (cast to vector) of a simulator's global position
DATA_SIM_STATUS		Passed to llRequestSimulatorData to get the status of a simulator
DATA_SIM_RATING		Passed to llRequestSimulatorData to get the rating of a simulator

PAYMENT_INFO_ON_FILE		Used with llRequestAgentData to tell if Agent is of "Payment Info On File" status
PAYMENT_INFO_USED	Used with llRequestAgentData to tell if Agent is of "Payment Info Used" status

ANIM_ON				Enable texture animation
LOOP				Loop when animating textures
REVERSE				Animate in the reverse direction
PING_PONG			Animate forward, then reverse.
SMOOTH				Textures slides, instead of stepping
ROTATE				Rotates the texture, instead of using frames
SCALE				Scales the texture, instead of using frames

ALL_SIDES			Passed to various texture and color library functions to modify all sides

LINK_SET			Passed to various link functions to modify all blocks in the object
LINK_ROOT			Passed to various link functions to modify only the root block (no effect on single block objects)
LINK_ALL_OTHERS		Passed to various link functions to modify all other blocks in the object
LINK_ALL_CHILDREN	Passed to various link functions to modify all child blocks in the object
LINK_THIS			Passed to various link functions to modify only the calling block

CHANGED_INVENTORY	Parameter of changed event handler used to indicate change to task's inventory
CHANGED_COLOR		Parameter of changed event handler used to indicate change to task's color
CHANGED_SHAPE		Parameter of changed event handler used to indicate change to task's shape parameters
CHANGED_SCALE		Parameter of changed event handler used to indicate change to task's scale
CHANGED_TEXTURE		Parameter of changed event handler used to indicate change to task's texture
CHANGED_LINK		Parameter of changed event handler used to indicate change to task's link status
CHANGED_ALLOWED_DROP Parameter of changed event handler used to indicate a user dropped an inventory item:onto task that was allowed only by llAllowInventoryDrop function call
CHANGED_OWNER		Parameter of changed event handler used to indicate change to task's owner ONLY when an object is sold as original or deeded to group
CHANGED_REGION		Parameter of changed event handler used to indicate the region has changed
CHANGED_TELEPORT	Parameter of changed event handler used to indicate teleport has completed
CHANGED_REGION_START	Parameter of changed event handler used to indicate the region has been restarted

TYPE_INTEGER		Indicates that the list entry is holding an integer
TYPE_FLOAT			Indicates that the list entry is holding an float
TYPE_STRING			Indicates that the list entry is holding an string
TYPE_KEY			Indicates that the list entry is holding an key
TYPE_VECTOR			Indicates that the list entry is holding an vector
TYPE_ROTATION		Indicates that the list entry is holding an rotation
TYPE_INVALID		Indicates that this wasn't a valid list entry


REMOTE_DATA_CHANNEL	Value of event_type in remote_event after successful llOpenRemoteDataChannel
REMOTE_DATA_REQUEST	Value of event_type in remote_event if XML-RPC request is received
REMOTE_DATA_REPLY	Value of event_type in remote_event if XML-RPC reply is received


PRIM_TYPE			Followed by PRIM_TYPE_BOX, PRIM_TYPE_CYLINDER, PRIM_TYPE_PRISM, PRIM_TYPE_SPHERE, PRIM_TYPE_TORUS, PRIM_TYPE_TUBE, or PRIM_TYPE_SCULPT and their arguments
PRIM_MATERIAL		Followed by PRIM_MATERIAL_STONE, PRIM_MATERIAL_METAL, PRIM_MATERIAL_GLASS, PRIM_MATERIAL_WOOD, PRIM_MATERIAL_FLESH, PRIM_MATERIAL_PLASTIC, or PRIM_MATERIAL_RUBBER
PRIM_PHYSICS		Sets physics to TRUE or FALSE
PRIM_FLEXIBLE		Followed by TRUE or FALSE, integer softness, float gravity, float friction, float wind, float tension, and vector force
PRIM_POINT_LIGHT	Followed by TRUE or FALSE, vector color, float intensity, float radius, float falloff
PRIM_TEMP_ON_REZ	Sets temporay on rez to TRUE or FALSE
PRIM_PHANTOM		Sets phantom to TRUE or FALSE
PRIM_CAST_SHADOWS	DEPRECATED. Takes 1 parameter, an integer, but has no effect when set and always returns 0 if used in llGetPrimitiveParams.
PRIM_POSITION		Sets primitive position to a vector position
PRIM_SIZE			Sets primitive size to a vector size
PRIM_ROTATION		Sets primitive rotation
PRIM_TEXTURE		Followed by an integer face, key id, vector repeats, vector offsets,:and float rotation in radians
PRIM_COLOR			Followed by an integer face, vector color, and float alpha
PRIM_BUMP_SHINY		Followed by an integer face, one of PRIM_SHINY_NONE, PRIM_SHINY_LOW,:PRIM_SHINY_MEDIUM, or PRIM_SHINY_HIGH,:and one of PRIM_BUMP_NONE, PRIM_BUMP_BRIGHT, PRIM_BUMP_DARK, etc
PRIM_FULLBRIGHT		Followed by an integer face, and TRUE or FALSE
PRIM_TEXGEN			Followed by an integer face, and one of PRIM_TEXGEN_DEFAULT or PRIM_TEXGEN_PLANAR
PRIM_GLOW			Followed by an integer face, and a float from 0.0 to 1.0 specifying glow amount

PRIM_TYPE_BOX		Followed by integer hole shape, vector cut, float hollow, vector twist,:vector top size, and vector top shear
PRIM_TYPE_CYLINDER	Followed by integer hole shape, vector cut, float hollow, vector twist,:vector top size, and vector top shear
PRIM_TYPE_PRISM		Followed by integer hole shape, vector cut, float hollow, vector twist,:vector top size, and vector top shear
PRIM_TYPE_SPHERE	Followed by integer hole shape, vector cut, float hollow, vector twist,:and vector dimple
PRIM_TYPE_TORUS		Followed by integer hole shape, vector cut, float hollow, vector twist,:vector hole size, vector top shear, vector advanced cut, vector taper,:float revolutions, float radius offset, and float skew
PRIM_TYPE_TUBE		Followed by integer hole shape, vector cut, float hollow, vector twist,:vector hole size, vector top shear, vector advanced cut, vector taper,:float revolutions, float radius offset, and float skew
PRIM_TYPE_RING		Followed by integer hole shape, vector cut, float hollow, vector twist,:vector hole size, vector top shear, vector advanced cut, vector taper,:float revolutions, float radius offset, and float skew
PRIM_TYPE_SCULPT	Followed by a key/string texture uuid, and one of PRIM_SCULPT_TYPE_SPHERE, PRIM_SCULPT_TYPE_TORUS, PRIM_SCULPT_TYPE_PLANE, or PRIM_SCULPT_TYPE_CYLINDER

PRIM_HOLE_DEFAULT	Sets hole type to match the prim type.
PRIM_HOLE_SQUARE	Sets hole type to square.
PRIM_HOLE_CIRCLE	Sets hole type to circle.
PRIM_HOLE_TRIANGLE	Sets hole type to triangle.

PRIM_MATERIAL_STONE		Sets material to stone
PRIM_MATERIAL_METAL		Sets material to metal
PRIM_MATERIAL_GLASS		Sets material to glass
PRIM_MATERIAL_WOOD		Sets material to wood
PRIM_MATERIAL_FLESH		Sets material to flesh
PRIM_MATERIAL_PLASTIC	Sets material to plastic
PRIM_MATERIAL_RUBBER	Sets material to rubber
PRIM_MATERIAL_LIGHT		Sets material to light

PRIM_SHINY_NONE			No shininess
PRIM_SHINY_LOW			Low shininess
PRIM_SHINY_MEDIUM		Medium shininess
PRIM_SHINY_HIGH			High shininess

PRIM_BUMP_NONE			No bump map
PRIM_BUMP_BRIGHT		Generate bump map from highlights
PRIM_BUMP_DARK			Generate bump map from lowlights
PRIM_BUMP_WOOD			Wood bump map
PRIM_BUMP_BARK			Bark bump map
PRIM_BUMP_BRICKS		Brick bump map
PRIM_BUMP_CHECKER		Checker bump map
PRIM_BUMP_CONCRETE		Concrete bump map
PRIM_BUMP_TILE			Tile bump map
PRIM_BUMP_STONE			Stone bump map
PRIM_BUMP_DISKS			Disk bump map
PRIM_BUMP_GRAVEL		Gravel bump map
PRIM_BUMP_BLOBS			Blob bump map
PRIM_BUMP_SIDING		Siding bump map
PRIM_BUMP_LARGETILE		Large tile bump map
PRIM_BUMP_STUCCO		Stucco bump map
PRIM_BUMP_SUCTION		Suction cup bump map
PRIM_BUMP_WEAVE			Weave bump map

PRIM_TEXGEN_DEFAULT		Default texture mapping
PRIM_TEXGEN_PLANAR		Planar texture mapping

PRIM_SCULPT_TYPE_SPHERE		Stitch edges in a sphere-like way
PRIM_SCULPT_TYPE_TORUS		Stitch edges in a torus-like way
PRIM_SCULPT_TYPE_PLANE		Do not stitch edges
PRIM_SCULPT_TYPE_CYLINDER	Stitch edges in a cylinder-like way
PRIM_SCULPT_TYPE_MASK		Mask used to determine stitching type
PRIM_SCULPT_FLAG_INVERT     Flag to specify that the surface normals should be inverted
PRIM_SCULPT_FLAG_MIRROR     Flag to specify that the prim should be reflected along X axis

MASK_BASE				Base permissions
MASK_OWNER				Owner permissions
MASK_GROUP				Group permissions
MASK_EVERYONE			Everyone permissions
MASK_NEXT				Next owner permissions

PERM_TRANSFER			Transfer permission
PERM_MODIFY				Modify permission
PERM_COPY				Copy permission
PERM_MOVE				Move permission
PERM_ALL				Move/Modify/Copy/Transfer permissions

PARCEL_MEDIA_COMMAND_STOP  Stop media stream
PARCEL_MEDIA_COMMAND_PAUSE Pause media stream
PARCEL_MEDIA_COMMAND_PLAY  Play media stream
PARCEL_MEDIA_COMMAND_LOOP  Loop media stream
PARCEL_MEDIA_COMMAND_TEXTURE  Get or set the parcel's media texture
PARCEL_MEDIA_COMMAND_URL  Get or set the parcel's media url
PARCEL_MEDIA_COMMAND_TYPE Get or set the parcel's media mimetype
PARCEL_MEDIA_COMMAND_DESC Get or set the parcel's media description
PARCEL_MEDIA_COMMAND_TIME Set media stream to specific time
PARCEL_MEDIA_COMMAND_SIZE Get or set the parcel's media pixel resolution
PARCEL_MEDIA_COMMAND_AGENT Allows media stream commands to apply to only one agent
PARCEL_MEDIA_COMMAND_UNLOAD Unloads the media stream
PARCEL_MEDIA_COMMAND_AUTO_ALIGN Auto aligns the media stream to the texture size.  May cause a performance hit and loss of some visual quality.

PAY_HIDE			Used with llSetPayPrice to hide a button
PAY_DEFAULT			Used with llSetPayPrice to use the default price for a button

LIST_STAT_MAX			Used with llListStatistics to find the largest number in a list
LIST_STAT_MIN			Used with llListStatistics to find the smallest number in a list
LIST_STAT_MEAN			Used with llListStatistics to find the mean of the numbers in a list
LIST_STAT_MEDIAN			Used with llListStatistics to find the median of the numbers in a list
LIST_STAT_STD_DEV		Used with llListStatistics to find the standard deviation of the numbers in a list
LIST_STAT_SUM			Used with llListStatistics to find the sum of the numbers in a list
LIST_STAT_SUM_SQUARES	Used with llListStatistics to find the sum of the squares of the numbers in a list
LIST_STAT_NUM_COUNT		Used with llListStatistics to find how many numbers are in a list
LIST_STAT_GEOMETRIC_MEAN	Used with llListStatistics to find the geometric mean of the numbers in a list (all numbers must be > 0)
LIST_STAT_RANGE			Used with llListStatistics to find the range of the numbers in a list

PARCEL_FLAG_ALLOW_FLY				Used with llGetParcelFlags to find if a parcel allows flying
PARCEL_FLAG_ALLOW_GROUP_SCRIPTS		Used with llGetParcelFlags to find if a parcel allows group scripts
PARCEL_FLAG_ALLOW_SCRIPTS			Used with llGetParcelFlags to find if a parcel allows outside scripts
PARCEL_FLAG_ALLOW_LANDMARK			Used with llGetParcelFlags to find if a parcel allows landmarks to be created
PARCEL_FLAG_ALLOW_TERRAFORM			Used with llGetParcelFlags to find if a parcel allows anyone to terraform the land
PARCEL_FLAG_ALLOW_DAMAGE			Used with llGetParcelFlags to find if a parcel allows damage
PARCEL_FLAG_ALLOW_CREATE_OBJECTS	Used with llGetParcelFlags to find if a parcel allows anyone to create objects
PARCEL_FLAG_USE_ACCESS_GROUP		Used with llGetParcelFlags to find if a parcel limits access to a group
PARCEL_FLAG_USE_ACCESS_LIST			Used with llGetParcelFlags to find if a parcel limits access to a list of residents
PARCEL_FLAG_USE_BAN_LIST			Used with llGetParcelFlags to find if a parcel uses a ban list
PARCEL_FLAG_USE_LAND_PASS_LIST		Used with llGetParcelFlags to find if a parcel allows passes to be purchased
PARCEL_FLAG_LOCAL_SOUND_ONLY		Used with llGetParcelFlags to find if a parcel restricts spacialized sound to the parcel
PARCEL_FLAG_RESTRICT_PUSHOBJECT		Used with llGetParcelFlags to find if a parcel restricts llPushObject() calls
PARCEL_FLAG_ALLOW_ALL_OBJECT_ENTRY		Used with llGetParcelFlags to find if a parcel allows all objects to enter
PARCEL_FLAG_ALLOW_GROUP_OBJECT_ENTRY	Used with llGetParcelFlags to find if a parcel only allows group (and owner) objects to enter

REGION_FLAG_ALLOW_DAMAGE			Used with llGetRegionFlags to find if a region is entirely damage enabled
REGION_FLAG_FIXED_SUN				Used with llGetRegionFlags to find if a region has a fixed sun position
REGION_FLAG_BLOCK_TERRAFORM			Used with llGetRegionFlags to find if a region terraforming disabled
REGION_FLAG_SANDBOX					Used with llGetRegionFlags to find if a region is a sandbox
REGION_FLAG_DISABLE_COLLISIONS		Used with llGetRegionFlags to find if a region has disabled collisions
REGION_FLAG_DISABLE_PHYSICS			Used with llGetRegionFlags to find if a region has disabled physics
REGION_FLAG_BLOCK_FLY				Used with llGetRegionFlags to find if a region blocks flying
REGION_FLAG_ALLOW_DIRECT_TELEPORT	Used with llGetRegionFlags to find if a region allows direct teleports
REGION_FLAG_RESTRICT_PUSHOBJECT		Used with llGetRegionFlags to find if a region restricts llPushObject() calls

HTTP_METHOD                         Used with llHTTPRequest to specify the method, such as "GET" or "POST"
HTTP_MIMETYPE                       Used with llHTTPRequest to specify the MIME type, defaults to "text/plain"
HTTP_BODY_MAXLENGTH                 Used with llHTTPRequest to specify the maxium reponse body to return
HTTP_VERIFY_CERT                    Used with llHTTPRequest to specify SSL certificate verification
HTTP_BODY_TRUNCATED                 Used with http_response to indicate truncation point in bytes

PARCEL_COUNT_TOTAL		Used with llGetParcelPrimCount to get the total number of prims on the parcel
PARCEL_COUNT_OWNER		Used with llGetParcelPrimCount to get the number of prims on the parcel owned by the owner
PARCEL_COUNT_GROUP		Used with llGetParcelPrimCount to get the number of prims on the parcel owned by the group
PARCEL_COUNT_OTHER		Used with llGetParcelPrimCount to get the number of prims on the parcel owned by others
PARCEL_COUNT_SELECTED	Used with llGetParcelPrimCount to get the number of prims on the parcel currently selected or sat upon
PARCEL_COUNT_TEMP		Used with llGetParcelPrimCount to get the number of prims on the parcel that are temp on rez

PARCEL_DETAILS_NAME		Used with llGetParcelDetails to get the parcel name.
PARCEL_DETAILS_DESC		Used with llGetParcelDetails to get the parcel description.
PARCEL_DETAILS_OWNER	Used with llGetParcelDetails to get the parcel owner id.
PARCEL_DETAILS_GROUP	Used with llGetParcelDetails to get the parcel group id.
PARCEL_DETAILS_AREA		Used with llGetParcelDetails to get the parcel area in square meters.

STRING_TRIM_HEAD		Used with llStringTrim to trim leading spaces from a string.
STRING_TRIM_TAIL		Used with llStringTrim to trim trailing spaces from a string.
STRING_TRIM				Used with llStringTrim to trim both leading and trailing spaces from a string.

CLICK_ACTION_NONE       Used with llSetClickAction to disable the click action
CLICK_ACTION_TOUCH      Used with llSetClickAction to set touch as the default action when object is clicked
CLICK_ACTION_SIT        Used with llSetClickAction to set sit as the default action when object is clicked
CLICK_ACTION_BUY        Used with llSetClickAction to set buy as the default action when object is clicked
CLICK_ACTION_PAY        Used with llSetClickAction to set pay as the default action when object is clicked
CLICK_ACTION_OPEN       Used with llSetClickAction to set open as the default action when object is clicked
CLICK_ACTION_PLAY       Used with llSetClickAction to set play as the default action when object is clicked
CLICK_ACTION_OPEN_MEDIA Used with llSetClickAction to set open-media as the default action when object is clicked

TOUCH_INVALID_TEXCOORD  Value returned by llDetectedTouchUV() and llDetectedTouchST() when the touch position is not valid.
TOUCH_INVALID_VECTOR    Value returned by llDetectedTouchPos(), llDetectedTouchNormal(), and llDetectedTouchBinormal() when the touch position is not valid.
TOUCH_INVALID_FACE      Value returned by llDetectedTouchFace() when the touch position is not valid.

# string constants
[word .1, .3, .5]
NULL_KEY			Indicates an empty key
EOF					Indicates the last line of a notecard was read
TEXTURE_BLANK			UUID for the "Blank" texture
TEXTURE_DEFAULT			UUID for the "Default Media" texture
TEXTURE_PLYWOOD			UUID for the default "Plywood" texture
TEXTURE_TRANSPARENT		UUID for the "White - Transparent" texture

URL_REQUEST_GRANTED		Used with http_request when a public URL is successfully granted
URL_REQUEST_DENIED		Used with http_request when a public URL is not available

# float constants
[word .3, .1, .5]
PI					3.1415926535897932384626433832795
TWO_PI				6.283185307179586476925286766559
PI_BY_TWO			1.5707963267948966192313216916398
DEG_TO_RAD			To convert from degrees to radians
RAD_TO_DEG			To convert from radians to degrees
SQRT2				1.4142135623730950488016887242097

# compound constants
[word .4, .2, .4]
ZERO_VECTOR			<0.0, 0.0, 0.0>
ZERO_ROTATION		<0.0, 0.0, 0.0, 1.0>


# flow control keywords
[word 0, 0, .8]
for					for loop:for (initializer; test; iteration):{:   statements:}
do					do loop:do:{:   statements:} while (test);
while				while loop:while (test):{    statements:}
if					if statement:if (test):{    statements:}
else				else clause:if (test):{    statements:}:else:{    statements:}
jump				jump statement:jump label;:
return				Leave current function or event handler

# flow control label
[line 0, 0, .8]
@					Label:Target for jump statement

# Comment
[one_sided_delimiter .8, .3, .15]
//					Comment:Non-functional commentary or disabled code

# String literals
[two_sided_delimiter 0, .2, 0]
"					String literal

# Functions
[word .5, 0, .15]
llSin			float llSin(float theta)\ntheta in radians
llCos			float llCos(float theta)\ntheta in radians
llTan			float llTan(float theta)\ntheta radians
llAtan2			float llAtan2(float y, float x)
llSqrt			float llSqrt(float val)\nreturns 0 and triggers a Math Error for imaginary results
llPow			float llPow(float base, float exponent)\nreturns 0 and triggers Math Error for imaginary results
llAbs			integer llAbs(integer val)
llFabs			float llFabs(float val)
llFrand			float llFrand(float mag)\nreturns random number in range [0,mag)
llFloor			integer llFloor(float val)\nreturns largest integer value <= val
llCeil			integer llCeil(float val)\nreturns smallest integer value >= val
llRound			integer llRound(float val)\nreturns val rounded to the nearest integer
llVecMag			float llVecMag(vector v)\nreturns the magnitude of v
llVecNorm			vector llVecNorm(vector v)\nreturns the v normalized
llVecDist			float llVecDist(vector v1, vector v2)\nreturns the 3D distance between v1 and v2
llRot2Euler			vector llRot2Euler(rotation q)\nreturns the Euler representation (roll, pitch, yaw) of q
llEuler2Rot			rotation llEuler2Rot(vector v)\nreturns the rotation representation of Euler Angles v
llAxes2Rot			rotation llAxes2Rot(vector fwd, vector left, vector up)\nreturns the rotation defined by the coordinate axes
llRot2Fwd			vector llRot2Fwd(rotation q)\nreturns the forward vector defined by q
llRot2Left			vector llRot2Left(rotation q)\nreturns the left vector defined by q
llRot2Up			vector llRot2Up(rotation q)\nreturns the up vector defined by q
llRotBetween			rotation llRotBetween(vector v1, vector v2)\nreturns the rotation to rotate v1 to v2
llWhisper			llWhisper(integer channel, string msg)\nwhispers msg on channel
llSay			llSay(integer channel, string msg)\nsays msg on channel
llShout			llShout(integer channel, string msg)\nshouts msg on channel
llListen			integer llListen(integer channel, string name, key id, string msg)\nsets a callback for msg on channel from name and id (name, id, and/or msg can be empty) and returns an identifier that can be used to deactivate or remove the listen
llListenControl			llListenControl(integer number, integer active)\nmakes a listen event callback active or inactive
llListenRemove			llListenRemove(integer number)\nremoves listen event callback number
llSensor			llSensor(string name, key id, integer type, float range, float arc)\nPerforms a single scan for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0)
llSensorRepeat			llSensorRepeat(string name, key id, integer type, float range, float arc, float rate)\nsets a callback for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0) and repeats every rate seconds
llSensorRemove			llSensorRemove()\nremoves sensor
llDetectedName			string llDetectedName(integer number)\nreturns the name of detected object number (returns empty string if number is not valid sensed object)
llDetectedKey			key llDetectedKey(integer number)\nreturns the key of detected object number (returns empty key if number is not valid sensed object)
llDetectedOwner			key llDetectedOwner(integer number)\nreturns the key of detected object's owner (returns empty key if number is not valid sensed object)
llDetectedType			integer llDetectedType(integer number)\nreturns the type (AGENT, ACTIVE, PASSIVE, SCRIPTED) of detected object (returns 0 if number is not valid sensed object)
llDetectedPos			vector llDetectedPos(integer number)\nreturns the position of detected object number (returns <0,0,0> if number is not valid sensed object)
llDetectedVel			vector llDetectedVel(integer number)\nreturns the velocity of detected object number (returns <0,0,0> if number is not valid sensed object)
llDetectedGrab			vector llDetectedGrab(integer number)\nreturns the grab offset of the user touching object (returns <0,0,0> if number is not valid sensed object)
llDetectedRot			rotation llDetectedRot(integer number)\nreturns the rotation of detected object number (returns <0,0,0,1> if number is not valid sensed object)
llDetectedGroup			integer llDetectedGroup(integer number)\nReturns TRUE if detected object is part of same group as owner
llDetectedLinkNumber			integer llDetectedLinkNumber(integer number)\nreturns the link position of the triggered event for touches and collisions only
llDie			llDie()\ndeletes the object
llGround			float llGround(vector v)\nreturns the ground height below the object position + v
llCloud			float llCloud(vector v)\nreturns the cloud density at the object position + v
llWind			vector llWind(vector v)\nreturns the wind velocity at the object position + v
llSetStatus			llSetStatus(integer status, integer value)\nsets status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB,\nSTATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z) to value
llGetStatus			integer llGetStatus(integer status)\ngets value of status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB,\nSTATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z)
llSetScale			llSetScale(vector scale)\nsets the scale
llGetScale			vector llGetScale()\ngets the scale
llSetColor			llSetColor(vector color, integer face)\nsets the color
llGetAlpha			float llGetAlpha(integer face)\ngets the alpha
llSetAlpha			llSetAlpha(float alpha, integer face)\nsets the alpha
llGetColor			vector llGetColor(integer face)\ngets the color
llSetTexture			llSetTexture(string texture, integer face)\nsets the texture of face
llScaleTexture			llScaleTexture(float scales, float scalet, integer face)\nsets the texture s, t scales for the chosen face
llOffsetTexture			llOffsetTexture(float offsets, float offsett, integer face)\nsets the texture s, t offsets for the chosen face
llRotateTexture			llRotateTexture(float rotation, integer face)\nsets the texture rotation for the chosen face
llGetTexture			string llGetTexture(integer face)\ngets the texture of face (if it's a texture in the object inventory, otherwise the key in a string)
llSetPos			llSetPos(vector pos)\nsets the position (if the script isn't physical)
llGetPos			vector llGetPos()\ngets the position (if the script isn't physical)
llGetLocalPos			vector llGetLocalPos()\ngets the position relative to the root (if the script isn't physical)
llSetRot			llSetRot(rotation rot)\nsets the rotation (if the script isn't physical)
llGetRot			rotation llGetRot()\ngets the rotation (if the script isn't physical)
llGetLocalRot			rotation llGetLocalRot()\ngets the rotation local to the root (if the script isn't physical)
llSetForce			llSetForce(vector force, integer local)\nsets force on object, in local coords if local == TRUE (if the script is physical)
llGetForce			vector llGetForce()\ngets the force (if the script is physical)
llTarget			integer llTarget(vector position, float range)\nset positions within range of position as a target and return an ID for the target
llTargetRemove			llTargetRemove(integer number)\nremoves target number
llRotTarget			integer llRotTarget(rotation rot, float error)\nset rotations with error of rot as a rotational target and return an ID for the rotational target
llRotTargetRemove			llRotTargetRemove(integer number)\nremoves rotational target number
llMoveToTarget			llMoveToTarget(vector target, float tau)\ncritically damp to target in tau seconds (if the script is physical)
llStopMoveToTarget			llStopMoveToTarget()\nStops critically damped motion
llApplyImpulse			llApplyImpulse(vector force, integer local)\napplies impulse to object, in local coords if local == TRUE (if the script is physical)
llApplyRotationalImpulse			llApplyRotationalImpulse(vector force, integer local)\napplies rotational impulse to object, in local coords if local == TRUE (if the script is physical)
llSetTorque			llSetTorque(vector torque, integer local)\nsets the torque of object, in local coords if local == TRUE (if the script is physical)
llGetTorque			vector llGetTorque()\ngets the torque (if the script is physical)
llSetForceAndTorque			llSetForceAndTorque(vector force, vector torque, integer local)\nsets the force and torque of object, in local coords if local == TRUE (if the script is physical)
llGetVel			vector llGetVel()\ngets the velocity
llGetAccel			vector llGetAccel()\ngets the acceleration
llGetOmega			vector llGetOmega()\ngets the omega
llGetTimeOfDay			float llGetTimeOfDay()\ngets the time in seconds since Second Life server midnight (or since server up-time; whichever is smaller)
llGetWallclock			float llGetWallclock()\ngets the time in seconds since midnight
llGetTime			float llGetTime()\ngets the time in seconds since creation
llResetTime			llResetTime()\nsets the time to zero
llGetAndResetTime			float llGetAndResetTime()\ngets the time in seconds since creation and sets the time to zero
llSound			llSound(string sound, float volume, integer queue, integer loop)\nplays sound at volume and whether it should loop or not
llPlaySound			llPlaySound(string sound, float volume)\nplays attached sound once at volume (0.0 - 1.0)
llLoopSound			llLoopSound(string sound, float volume)\nplays attached sound looping indefinitely at volume (0.0 - 1.0)
llLoopSoundMaster			llLoopSoundMaster(string sound, float volume)\nplays attached sound looping at volume (0.0 - 1.0), declares it a sync master
llLoopSoundSlave			llLoopSoundSlave(string sound, float volume)\nplays attached sound looping at volume (0.0 - 1.0), synced to most audible sync master
llPlaySoundSlave			llPlaySoundSlave(string sound, float volume)\nplays attached sound once at volume (0.0 - 1.0), synced to next loop of most audible sync master
llTriggerSound			llTriggerSound(string sound, float volume)\nplays sound at volume (0.0 - 1.0), centered at but not attached to object
llStopSound			llStopSound()\nStops currently attached sound
llPreloadSound			llPreloadSound(string sound)\npreloads a sound on viewers within range
llGetSubString			string llGetSubString(string src, integer start, integer end)\nreturns the indicated substring
llDeleteSubString			string llDeleteSubString(string src, integer start, integer end)\nremoves the indicated substring and returns the result
llInsertString			string llInsertString(string dst, integer position, string src)\ninserts src into dst at position and returns the result
llToUpper			string llToUpper(string src)\nconvert src to all upper case and returns the result
llToLower			string llToLower(string src)\nconvert src to all lower case and returns the result
llGiveMoney			llGiveMoney(key destination, integer amount)\ntransfer amount of money from script owner to destination
llMakeExplosion			llMakeExplosion(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)\nMake a round explosion of particles
llMakeFountain			llMakeFountain(integer particles, float scale, float vel, float lifetime, float arc, integer bounce, string texture, vector offset, float bounce_offset)\nMake a fountain of particles
llMakeSmoke			llMakeSmoke(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)\nMake smoke like particles
llMakeFire			llMakeFire(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)\nMake fire like particles
llRezObject			llRezObject(string inventory, vector pos, vector vel, rotation rot, integer param)\nInstanciate owners inventory object at pos with velocity vel and rotation rot with start parameter param
llLookAt			llLookAt(vector target, F32 strength, F32 damping)\nCause object name to point it's forward axis towards target
llStopLookAt			llStopLookAt()\nStop causing object name to point at a target
llSetTimerEvent			llSetTimerEvent(float sec)\nCause the timer event to be triggered every sec seconds
llSleep			llSleep(float sec)\nPut script to sleep for sec seconds
llGetMass			float llGetMass()\nGet the mass of task name that script is attached to
llCollisionFilter			llCollisionFilter(string name, key id, integer accept)\nif accept == TRUE, only accept collisions with objects name and id (either is optional), otherwise with objects not name or id
llTakeControls			llTakeControls(integer controls, integer accept, integer pass_on)\nTake controls from agent task has permissions for.  If (accept == (controls & input)), send input to task.  If pass_on send to agent also.
llReleaseControls			llReleaseControls()\nStop taking inputs
llAttachToAvatar			llAttachToAvatar(integer attachment)\nAttach to avatar task has permissions for at point attachment
llDetachFromAvatar			llDetachFromAvatar()\nDrop off of avatar
llTakeCamera			llTakeCamera(key avatar)\nMove avatar's viewpoint to task
llReleaseCamera			llReleaseCamera(key avatar)\nReturn camera to agent
llGetOwner			key llGetOwner()\nReturns the owner of the task
llInstantMessage			llInstantMessage(key user, string message)\nIMs message to the user
llEmail			llEmail(string address, string subject, string message)\nSends email to address with subject and message
llGetNextEmail			llGetNextEmail(string address, string subject)\nGet the next waiting email with appropriate address and/or subject (if blank they are ignored)
llGetKey			key llGetKey()\nGet the key for the task the script is attached to
llSetBuoyancy			llSetBuoyancy(float buoyancy)\nSet the tasks buoyancy (0 is none, < 1.0 sinks, 1.0 floats, > 1.0 rises)
llSetHoverHeight			llSetHoverHeight(float height, integer water, float tau)\nCritically damps to a height (either above ground level or above the higher of land and water if water == TRUE)
llStopHover			llStopHover()\nStop hovering to a height
llMinEventDelay			llMinEventDelay(float delay)\nSet the minimum time between events being handled
llSoundPreload			llSoundPreload(string sound)\npreloads a sound on viewers within range
llRotLookAt			llRotLookAt(rotation target, F32 strength, F32 damping)\nCause object name to point it's forward axis towards target
llStringLength			integer llStringLength(string str)\nReturns the length of string
llStartAnimation			llStartAnimation(string anim)\nStart animation anim for agent that owns object
llStopAnimation			llStopAnimation(string anim)\nStop animation anim for agent that owns object
llPointAt			llPointAt(vector pos)\nMake agent that owns object point at pos
llStopPointAt			llStopPointAt()\nStop agent that owns object pointing
llTargetOmega			llTargetOmega(vector axis, float spinrate, float gain)\nAttempt to spin at spinrate with strength gain
llGetStartParameter			integer llGetStartParameter()\nGet's the start paramter passed to llRezObject
llGodLikeRezObject			llGodLikeRezObject(key inventory, vector pos)\nrez directly off of a UUID if owner has dog-bit set", TRUE));
llRequestPermissions			llRequestPermissions(key agent, integer perm)\nask agent to allow the script to do perm (NB: Debit, ownership, link, joint, and permission requests can only go to the task's owner)
llGetPermissionsKey			key llGetPermissionsKey()\nReturn agent that permissions are enabled for.  NULL_KEY if not enabled
llGetPermissions			integer llGetPermissions()\nreturn what permissions have been enabled
llGetLinkNumber			integer llGetLinkNumber()\nReturns what number in a link set the script is attached to (0 means no link, 1 the root, 2 for first child, &c)
llSetLinkColor			llSetLinkColor(integer linknumber, vector color, integer face)\nIf a task exists in the link chain at linknumber, set face to color
llCreateLink			llCreateLink(key target, integer parent)\nAttempt to link task script is attached to and target (requires permission PERMISSION_CHANGE_LINKS be set). If parent == TRUE, task script is attached to is the root
llBreakLink			llBreakLink(integer linknum)\nDelinks the task with the given link number (requires permission PERMISSION_CHANGE_LINKS be set)
llBreakAllLinks			llBreakAllLinks()\nDelinks all tasks in the link set (requires permission PERMISSION_CHANGE_LINKS be set)
llGetLinkKey			key llGetLinkKey(integer linknum)\nGet the key of linknumber in link set
llGetLinkName			string llGetLinkName(integer linknum)\nGet the name of linknumber in link set
llGetInventoryNumber			integer llGetInventoryNumber(integer type)\nGet the number of items of a given type in the task's inventory.\nValid types: INVENTORY_TEXTURE, INVENTORY_SOUND, INVENTORY_OBJECT, INVENTORY_SCRIPT, INVENTORY_CLOTHING, INVENTORY_BODYPART, INVENTORY_NOTECARD, INVENTORY_LANDMARK, INVENTORY_ALL
llGetInventoryName			string llGetInventoryName(integer type, integer number)\nGet the name of the inventory item number of type
llSetScriptState			llSetScriptState(string name, integer run)\nControl the state of a script name.
llGetEnergy			float llGetEnergy()\nReturns how much energy is in the object as a percentage of maximum
llGiveInventory			llGiveInventory(key destination, string inventory)\nGive inventory to destination
llRemoveInventory			llRemoveInventory(string inventory)\nRemove the named inventory item
llSetText			llSetText(string text, vector color, float alpha)\nSet text floating over object
llWater			float llWater(vector v)\nreturns the water height below the object position + v
llPassTouches			llPassTouches(integer pass)\nif pass == TRUE, touches are passed from children on to parents (default is FALSE)
llRequestAgentData			key llRequestAgentData(key id, integer data)\nRequests data about agent id.  When data is available the dataserver event will be raised
llRequestInventoryData			key llRequestInventoryData(string name)\nRequests data from object's inventory object.  When data is available the dataserver event will be raised
llSetDamage			llSetDamage(float damage)\nSets the amount of damage that will be done to an object that this task hits.  Task will be killed.
llTeleportAgentHome			llTeleportAgentHome(key id)\nTeleports agent on owner's land to agent's home location
llModifyLand			llModifyLand(integer action, integer size)\nModify land with action (LAND_LEVEL, LAND_RAISE, LAND_LOWER, LAND_SMOOTH, LAND_NOISE, LAND_REVERT)\non size (LAND_SMALL_BRUSH, LAND_MEDIUM_BRUSH, LAND_LARGE_BRUSH)
llCollisionSound			llCollisionSound(string impact_sound, float impact_volume)\nSuppress default collision sounds, replace default impact sounds with impact_sound (empty string to just suppress)
llCollisionSprite			llCollisionSprite(string impact_sprite)\nSuppress default collision sprites, replace default impact sprite with impact_sprite (empty string to just suppress)
llGetAnimation			string llGetAnimation(key id)\nGet the currently playing locomotion animation for avatar id
llResetScript			llResetScript()\nResets the script
llMessageLinked			llMessageLinked(integer linknum, integer num, string str, key id)\nSends num, str, and id to members of the link set (LINK_ROOT sends to root task in a linked set,\nLINK_SET sends to all tasks,\nLINK_ALL_OTHERS to all other tasks,\nLINK_ALL_CHILDREN to all children,\nLINK_THIS to the task the script it is in)
llPushObject			llPushObject(key id, vector impulse, vector ang_impulse, integer local)\nApplies impulse and ang_impulse to object id
llPassCollisions			llPassCollisions(integer pass)\nif pass == TRUE, collisions are passed from children on to parents (default is FALSE)
llGetScriptName			llGetScriptName()\nReturns the script name
llGetNumberOfSides			integer llGetNumberOfSides()\nReturns the number of sides
llAxisAngle2Rot			rotation llAxisAngle2Rot(vector axis, float angle)\nReturns the rotation generated angle about axis
llRot2Axis			vector llRot2Axis(rotation rot)\nReturns the rotation axis represented by rot
llRot2Angle			float llRot2Angle(rotation rot)\nReturns the rotation angle represented by rot
llAcos			float llAcos(float val)\nReturns the arccosine in radians of val
llAsin			float llAsin(float val)\nReturns the arcsine in radians of val
llAngleBetween			float llAngleBetween(rotation a, rotation b)\nReturns angle between rotation a and b
llGetInventoryKey			key llGetInventoryKey(string name)\nReturns the key of the inventory name
llAllowInventoryDrop			llAllowInventoryDrop(integer add)\nIf add == TRUE, users without permissions can still drop inventory items onto task
llGetSunDirection			vector llGetSunDirection()\nReturns the sun direction on the simulator
llGetTextureOffset			vector llGetTextureOffset(integer side)\nReturns the texture offset of side in the x and y components of a vector
llGetTextureScale			vector llGetTextureScale(integer side)\nReturns the texture scale of side in the x and y components of a vector
llGetTextureRot			float llGetTextureRot(integer side)\nReturns the texture rotation of side
llSubStringIndex			integer llSubStringIndex(string source, string pattern)\nFinds index in source where pattern first appears (returns -1 if not found)
llGetOwnerKey			key llGetOwnerKey(key id)\nFind the owner of id
llGetCenterOfMass			vector llGetCenterOfMass()\nGet the object's center of mass
llListSort			list llListSort(list src, integer stride, integer ascending)\nSort the list into blocks of stride in ascending order if ascending == TRUE.  Note that sort only works between same types.
llGetListLength			integer llGetListLength(list src)\nGet the number of elements in the list
llList2Integer			integer llList2Integer(list src, integer index)\nCopy the integer at index in the list
llList2Float			float llList2Float(list src, integer index)\nCopy the float at index in the list
llList2String			string llList2String(list src, integer index)\nCopy the string at index in the list
llList2Key			key llList2Key(list src, integer index)\nCopy the key at index in the list
llList2Vector			vector llList2Vector(list src, integer index)\nCopy the vector at index in the list
llList2Rot			rotation llList2Rot(list src, integer index)\nCopy the rotation at index in the list
llList2List			list llList2List(list src, integer start, integer end)\nCopy the slice of the list from start to end
llDeleteSubList			list llDeleteSubList(list src, integer start, integer end)\nRemove the slice from the list and return the remainder
llGetListEntryType			integer llGetListEntryType(list src, integer index)\nReturns the type of the index entry in the list\n(TYPE_INTEGER, TYPE_FLOAT, TYPE_STRING, TYPE_KEY, TYPE_VECTOR, TYPE_ROTATION, or TYPE_INVALID if index is off list)
llList2CSV			string llList2CSV(list src)\nCreate a string of comma separated values from list
llCSV2List			list llCSV2List(string src)\nCreate a list from a string of comma separated values
llListRandomize			list llListRandomize(list src, integer stride)\nReturns a randomized list of blocks of size stride
llList2ListStrided			list llList2ListStrided(list src, integer start, integer end, integer stride)\nCopy the strided slice of the list from start to end
llGetRegionCorner			vector llGetRegionCorner()\nReturns a vector with the south west corner x,y position of the region the object is in
llListInsertList			list llListInsertList(list dest, list src, integer start)\nInserts src into dest at position start
llListFindList			integer llListFindList(list src, list test)\nReturns the start of the first instance of test in src, -1 if not found
llGetObjectName			string llGetObjectName()\nReturns the name of the object script is attached to
llSetObjectName			llSetObjectName(string name)\nSets the objects name
llGetDate			string llGetDate()\nGets the date as YYYY-MM-DD
llEdgeOfWorld			integer llEdgeOfWorld(vector pos, vector dir)\nChecks to see whether the border hit by dir from pos is the edge of the world (has no neighboring simulator)
llGetAgentInfo			integer llGetAgentInfo(key id)\nGets information about agent ID.\nReturns AGENT_FLYING, AGENT_ATTACHMENTS, AGENT_SCRIPTED, AGENT_SITTING, AGENT_ON_OBJECT, AGENT_MOUSELOOK, AGENT_AWAY, AGENT_BUSY, AGENT_TYPING, AGENT_CROUCHING, AGENT_ALWAYS_RUN, AGENT_WALKING and/or AGENT_IN_AIR.
llAdjustSoundVolume			llAdjustSoundVolume(float volume)\nadjusts volume of attached sound (0.0 - 1.0)
llSetSoundQueueing			llSetSoundQueueing(integer queue)\ndetermines whether attached sound calls wait for the current sound to finish (0 = no [default], nonzero = yes)
llSetSoundRadius			llSetSoundRadius(float radius)\nestablishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered)
llKey2Name			string llKey2Name(key id)\nReturns the name of the object key, iff the object is in the current simulator, otherwise the empty string
llSetTextureAnim			llSetTextureAnim(integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate)\nAnimate the texture on the specified face/faces
llTriggerSoundLimited			llTriggerSoundLimited(string sound, float volume, vector tne, vector bsw)\nplays sound at volume (0.0 - 1.0), centered at but not attached to object, limited to AABB defined by vectors top-north-east and bottom-south-west
llEjectFromLand			llEjectFromLand(key pest)\nEjects pest from land that you own
llParseString2List			list llParseString2List(string src, list separators, list spacers)\nBreaks src into a list, discarding separators, keeping spacers (separators and spacers must be lists of strings, maximum of 8 each)
llOverMyLand			integer llOverMyLand(key id)\nReturns TRUE if id is over land owner of object owns, FALSE otherwise
llGetLandOwnerAt			key llGetLandOwnerAt(vector pos)\nReturns the key of the land owner, NULL_KEY if public
llGetNotecardLine			key llGetNotecardLine(string name, integer line)\nReturns line line of notecard name via the dataserver event
llGetAgentSize			vector llGetAgentSize(key id)\nIf the agent is in the same sim as the object, returns the size of the avatar
llSameGroup			integer llSameGroup(key id)\nReturns TRUE if ID is in the same sim and has the same active group, otherwise FALSE
llUnSit			key llUnSit(key id)\nIf agent identified by id is sitting on the object the script is attached to or is over land owned by the objects owner, the agent is forced to stand up
llGroundSlope			vector llGroundSlope(vector v)\nreturns the ground slope below the object position + v
llGroundNormal			vector llGroundNormal(vector v)\nreturns the ground normal below the object position + v
llGroundContour			vector llGroundCountour(vector v)\nreturns the ground contour below the object position + v
llGetAttached			integer llGetAttached()\nreturns the object attachment point or 0 if not attached
llGetFreeMemory			integer llGetFreeMemory()\nreturns the available heap space for the current script
llGetRegionName			string llGetRegionName()\nreturns the current region name
llGetRegionTimeDilation			float llGetRegionTimeDilation()\nreturns the current time dilation as a float between 0 and 1
llGetRegionFPS			float llGetRegionFPS()\nreturns the mean region frames per second
llParticleSystem			llParticleSystem(list rules)\nCreates a particle system based on rules.  Empty list removes particle system from object.\nList format is [ rule1, data1, rule2, data2 . . . rulen, datan ]
llGroundRepel			llGroundRepel(float height, integer water, float tau)\nCritically damps to height if within height*0.5 of level (either above ground level or above the higher of land and water if water == TRUE)
llGiveInventoryList			llGiveInventoryList(key destination, string category, list inventory)\nGive inventory to destination in a new category
llSetVehicleType			llSetVehicleType(integer type)\nsets vehicle to one of the default types
llSetVehicleFloatParam			llSetVehicleFloatParam(integer param, float value)\nsets the specified vehicle float parameter
llSetVehicleVectorParam			llSetVehicleVectorParam(integer param, vector vec)\nsets the specified vehicle vector parameter
llSetVehicleRotationParam			llSetVehicleVectorParam(integer param, rotation rot)\nsets the specified vehicle rotation parameter
llSetVehicleFlags			llSetVehicleFlags(integer flags)\nsets the enabled bits in 'flags'
llRemoveVehicleFlags			llRemoveVehicleFlags(integer flags)\nremoves the enabled bits in 'flags'
llSitTarget			llSitTarget(vector offset, rotation rot)\nSet the sit location for this object (if offset == <0,0,0> clear it)
llAvatarOnSitTarget			key llAvatarOnSitTarget()\nIf an avatar is sitting on the sit target, return the avatar's key, NULL_KEY otherwise
llAddToLandPassList			llAddToLandPassList(key avatar, float hours)\nAdd avatar to the land pass list for hours
llSetTouchText			llSetTouchText(string text)\nDisplays text in pie menu that acts as a touch
llSetSitText			llSetSitText(string text)\nDisplays text rather than sit in pie menu
llSetCameraEyeOffset			llSetCameraEyeOffset(vector offset)\nSets the camera eye offset used in this object if an avatar sits on it
llSetCameraAtOffset			llSetCameraAtOffset(vector offset)\nSets the camera at offset used in this object if an avatar sits on it
llDumpList2String			string llDumpList2String(list src, string separator)\nWrite the list out in a single string using separator between values
llScriptDanger			integer llScriptDanger(vector pos)\nReturns true if pos is over public land, sandbox land, land that doesn't allow everyone to edit and build, or land that doesn't allow outside scripts
llDialog			llDialog(key avatar, string message, list buttons, integer chat_channel\nShows a dialog box on the avatar's screen with the message.\nUp to 12 strings in the list form buttons.\nIf a button is clicked, the name is chatted on chat_channel.
llVolumeDetect			llVolumeDetect(integer detect)\nIf detect = TRUE, object becomes phantom but triggers collision_start and collision_end events\nwhen other objects start and stop interpenetrating.\nMust be applied to the root object.
llResetOtherScript			llResetOtherScript(string name)\nResets script name
llGetScriptState			integer llGetScriptState(string name)\nResets TRUE if script name is running
llRemoteLoadScript			Deprecated.  Please use llRemoteLoadScriptPin instead.
llSetRemoteScriptAccessPin			llSetRemoteScriptAccessPin(integer pin)\nIf pin is set to a non-zero number, the task will accept remote script\nloads via llRemoteLoadScriptPin if it passes in the correct pin.\nOthersise, llRemoteLoadScriptPin is ignored.
llRemoteLoadScriptPin			llRemoteLoadScriptPin(key target, string name, integer pin, integer running, integer start_param)\nIf the owner of the object this script is attached can modify target,\nthey are in the same region,\nand the matching pin is used,\ncopy script name onto target,\nif running == TRUE, start the script with param.
llOpenRemoteDataChannel			llOpenRemoteDataChannel()\nCreates a channel to listen for XML-RPC calls.  Will trigger a remote_data event with channel id once it is available.
llSendRemoteData			key llSendRemoteData(key channel, string dest, integer idata, string sdata)\nSend an XML-RPC request to dest through channel with payload of channel (in a string), integer idata and string sdata.\nA message identifier key is returned.\nAn XML-RPC reply will trigger a remote_data event and reference the message id.\nThe message_id is returned.
llRemoteDataReply			llRemoteDataReply(key channel, key message_id, string sdata, integer idata)\nSend an XML-RPC reply to message_id on channel with payload of string sdata and integer idata
llCloseRemoteDataChannel			llCloseRemoteDataChannel(key channel)\nCloses XML-RPC channel.
llMD5String			string llMD5String(string src, integer nonce)\nPerforms a RSA Data Security, Inc. MD5 Message-Digest Algorithm on string with nonce.  Returns a 32 character hex string.
llSetPrimitiveParams			llSetPrimitiveParams(list rules)\nSet primitive parameters based on rules.
llStringToBase64			string llStringToBase64(string str)\nConverts a string to the Base 64 representation of the string.
llBase64ToString			string llBase64ToString(string str)\nConverts a Base 64 string to a conventional string.  If the conversion creates any unprintable characters, they are converted to spaces.
llXorBase64Strings			string llXorBase64Strings(string s1, string s2)\nDEPRECATED!  Please use llXorBase64StringsCorrect instead!!  Incorrectly performs an exclusive or on two Base 64 strings and returns a Base 64 string.  s2 repeats if it is shorter than s1.  Retained for backwards compatability.
llRemoteDataSetRegion			llRemoteDataSetRegion()\nIf an object using remote data channels changes regions, you must call this function to reregister the remote data channels.\nYou do not need to make this call if you don't change regions.
llLog10			float llLog10(float val)\nReturns the base 10 log of val if val > 0, otherwise returns 0.
llLog			float llLog(float val)\nReturns the base e log of val if val > 0, otherwise returns 0.
llGetAnimationList			list llGetAnimationList(key id)\nGets a list of all playing animations for avatar id
llSetParcelMusicURL			llSetParcelMusicURL(string url)\nSets the streaming audio URL for the parcel object is on
llGetRootPosition			vector llGetRootPosition()\nGets the global position of the root object of the object script is attached to
llGetRootRotation			rotation llGetRootRotation()\nGets the global rotation of the root object of the object script is attached to
llGetObjectDesc			string llGetObjectDesc()\nReturns the description of the object the script is attached to
llSetObjectDesc			llSetObjectDesc(string name)\nSets the object's description
llGetCreator			key llGetCreator()\nReturns the creator of the object
llGetTimestamp			string llGetTimestamp()\nGets the timestamp in the format: YYYY-MM-DDThh:mm:ss.ff..fZ
llSetLinkAlpha			llSetLinkAlpha(integer linknumber, float alpha, integer face)\nIf a prim exists in the link chain at linknumber, set face to alpha
llGetNumberOfPrims			integer llGetNumberOfPrims()\nReturns the number of prims in a link set the script is attached to
llGetNumberOfNotecardLines			key llGetNumberOfNotecardLines(string name)\nReturns number of lines in notecard 'name' via the dataserver event (cast return value to integer)
llGetBoundingBox			list llGetBoundingBox(key object)\nReturns the bounding box around an object (including any linked prims) relative to the root prim, in a list:  [ (vector) min_corner, (vector) max_corner ]
llGetGeometricCenter			vector llGetGeometricCenter()\nReturns the geometric center of the linked set the script is attached to.
llGetPrimitiveParams			list llGetPrimitiveParams(list params)\nGets primitive parameters specified in the params list.
llIntegerToBase64			string llIntegerToBase64(integer number)\nBig endian encode of of integer as a Base64 string.
llBase64ToInteger			integer llBase64ToInteger(string str)\nBig endian decode of a Base64 string into an integer.
llGetGMTclock			float llGetGMTclock()\nGets the time in seconds since midnight in GMT
llGetSimulatorHostname			string llGetSimulatorHostname()\nGets the hostname of the machine script is running on (same as string in viewer Help dialog)
llSetLocalRot			llSetLocalRot(rotation rot)\nsets the rotation of a child prim relative to the root prim
llParseStringKeepNulls			list llParseStringKeepNulls(string src, list separators, list spacers)\nBreaks src into a list, discarding separators, keeping spacers (separators and spacers must be lists of strings, maximum of 8 each), keeping any null values generated.
llRezAtRoot			llRezAtRoot(string inventory, vector pos, vector vel, rotation rot, integer param)\nInstantiate owner's inventory object at pos with velocity vel and rotation rot with start parameter param.\nThe last selected root object's location will be set to pos
llGetObjectPermMask			integer llGetObjectPermMask(integer mask)\nReturns the requested permission mask for the root object the task is attached to.", FALSE));
llSetObjectPermMask			llSetObjectPermMask(integer mask, integer value)\nSets the given permission mask to the new value on the root object the task is attached to.", TRUE));
llGetInventoryPermMask			integer llGetInventoryPermMask(string item, integer mask)\nReturns the requested permission mask for the inventory item.", FALSE));
llSetInventoryPermMask			llSetInventoryPermMask(string item, integer mask, integer value)\nSets the given permission mask to the new value on the inventory item.", TRUE));
llGetInventoryCreator			key llGetInventoryCreator(string item)\nReturns the key for the creator of the inventory item.", FALSE));
llOwnerSay			llOwnerSay(string msg)\nsays msg to owner only (if owner in sim)
llRequestSimulatorData			key llRequestSimulatorData(string simulator, integer data)\nRequests data about simulator.  When data is available the dataserver event will be raised
llForceMouselook			llForceMouselook(integer mouselook)\nIf mouselook is TRUE any avatar that sits on this object is forced into mouselook mode
llGetObjectMass			float llGetObjectMass(key id)\nGet the mass of the object with key id
llListReplaceList			list llListReplaceList(list dest, list src, integer start, integer end)\nReplaces start through end of dest with src.
llLoadURL			llLoadURL(key avatar_id, string message, string url)\nShows dialog to avatar avatar_id offering to load web page at URL.  If user clicks yes, launches their web browser.
llParcelMediaCommandList			llParcelMediaCommandList(list command)\nSends a list of commands, some with arguments, to a parcel.
llParcelMediaQuery			list llParcelMediaQuery(list query)\nSends a list of queries, returns a list of results.
llModPow			integer llModPow(integer a, integer b, integer c)\nReturns a raised to the b power, mod c. ( (a**b)%c ).  b is capped at 0xFFFF (16 bits).
llGetInventoryType			integer llGetInventoryType(string name)\nReturns the type of the inventory name
llSetPayPrice			llSetPayPrice(integer price, list quick_pay_buttons)\nSets the default amount when someone chooses to pay this object.
llGetCameraPos			vector llGetCameraPos()\nGets current camera position for agent task has permissions for.
llGetCameraRot			rotation llGetCameraRot()\nGets current camera orientation for agent task has permissions for.
llSetPrimURL			llSetPrimURL(string url)\nUpdates the URL for the web page shown on the sides of the object.
llRefreshPrimURL			llRefreshPrimURL()\nReloads the web page shown on the sides of the object.
llEscapeURL			string llEscapeURL(string url)\nReturns and escaped/encoded version of url, replacing spaces with %20 etc.
llUnescapeURL			string llUnescapeURL(string url)\nReturns and unescaped/unencoded version of url, replacing %20 with spaces etc.
llMapDestination			llMapDestination(string simname, vector pos, vector look_at)\nOpens world map centered on region with pos highlighted.\nOnly works for scripts attached to avatar, or during touch events.\n(NOTE: look_at currently does nothing)
llAddToLandBanList			llAddToLandBanList(key avatar, float hours)\nAdd avatar to the land ban list for hours
llRemoveFromLandPassList			llRemoveFromLandPassList(key avatar)\nRemove avatar from the land pass list
llRemoveFromLandBanList			llRemoveFromLandBanList(key avatar)\nRemove avatar from the land ban list
llSetCameraParams			llSetCameraParams(list rules)\nSets multiple camera parameters at once.\nList format is [ rule1, data1, rule2, data2 . . . rulen, datan ]
llClearCameraParams			llClearCameraParams()\nResets all camera parameters to default values and turns off scripted camera control.
llListStatistics			float llListStatistics(integer operation, list l)\nPerform statistical aggregate functions on list l using LIST_STAT_* operations.
llGetUnixTime			integer llGetUnixTime()\nGet the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock.
llGetParcelFlags			integer llGetParcelFlags(vector pos)\nGet the parcel flags (PARCEL_FLAG_*) for the parcel including the point pos.
llGetRegionFlags			integer llGetRegionFlags()\nGet the region flags (REGION_FLAG_*) for the region the object is in.
llXorBase64StringsCorrect			string llXorBase64StringsCorrect(string s1, string s2)\nCorrectly performs an exclusive or on two Base 64 strings and returns a Base 64 string.  s2 repeats if it is shorter than s1.
llHTTPRequest			llHTTPRequest(string url, list parameters, string body)\nSend an HTTP request.
llResetLandBanList			llResetLandBanList()\nRemoves all residents from the land ban list.
llResetLandPassList			llResetLandPassList()\nRemoves all residents from the land access/pass list.
llGetObjectPrimCount			integer llGetObjectPrimCount(key object_id)\nReturns the total number of prims for an object.
llGetParcelPrimOwners			list llGetParcelPrimOwners(vector pos)\nReturns a list of all residents who own objects on the parcel and the number of objects they own.\nRequires owner-like permissions for the parcel.
llGetParcelPrimCount			integer llGetParcelPrimCount(vector pos, integer category, integer sim_wide)\nGets the number of prims on the parcel of the given category.\nCategories: PARCEL_COUNT_TOTAL, _OWNER, _GROUP, _OTHER, _SELECTED, _TEMP.
llGetParcelMaxPrims			integer llGetParcelMaxPrims(vector pos, integer sim_wide)\nGets the maximum number of prims allowed on the parcel at pos.
llGetParcelDetails			list llGetParcelDetails(vector pos, list params)\nGets the parcel details specified in params for the parcel at pos.\nParams is one or more of: PARCEL_DETAILS_NAME, _DESC, _OWNER, _GROUP, _AREA
llSetLinkPrimitiveParams			llSetLinkPrimitiveParams(integer linknumber, list rules)\nSet primitive parameters for linknumber based on rules.
llSetLinkTexture			llSetLinkTexture(integer link_pos, string texture, integer face)\nSets the texture of face for link_pos
llStringTrim			string llStringTrim(string src, integer trim_type)\nTrim leading and/or trailing spaces from a string.\nUses trim_type of STRING_TRIM, STRING_TRIM_HEAD or STRING_TRIM_TAIL.
llRegionSay			llRegionSay(integer channel, string msg)\nbroadcasts msg to entire region on channel (not 0.)
llGetObjectDetails			list llGetObjectDetails(key id, list params)\nGets the object details specified in params for the object with key id.\nDetails are OBJECT_NAME, _DESC, _POS, _ROT, _VELOCITY, _OWNER, _GROUP, _CREATOR.
llSetClickAction			llSetClickAction(integer action)\nSets the action performed when a prim is clicked upon.
llGetRegionAgentCount			int llGetRegionAgentCount()\nreturns the number of agents in a region
llTextBox			llTextBox(key avatar, string message, integer chat_channel\nShows a dialog box on the avatar's screen with the message.\nA text box asks for input, and if entered the text is chatted on chat_channel.
llGetAgentLanguage			string llGetAgentLanguage(key id)\nGets the agents preferred language..
llDetectedTouchUV			vector llDetectedTouchUV(integer number)\nreturns the u and v coordinates in the first two components of a vector, for a triggered touch event
llDetectedTouchFace			integer llDetectedTouchFace(integer number)\nreturns the index of the face on the object for a triggered touch event
llDetectedTouchPos			vector llDetectedTouchPos(integer number)\nreturns the position touched for a triggered touch event
llDetectedTouchNormal			vector llDetectedTouchNormal(integer number)\nreturns the surface normal for a triggered touch event
llDetectedTouchBinormal			vector llDetectedTouchBinormal(integer number)\nreturns the surface binormal for a triggered touch event
llDetectedTouchST			vector llDetectedTouchST(integer number)\nreturns the s and t coordinates in the first two components of a vector, for a triggered touch event
llSHA1String			string llSHA1String(string sr)\nPerforms a SHA1 security Hash.  Returns a 40 character hex string.
llGetFreeURLs			integer llGetFreeURLs()\nreturns the available urls for the current script
llRequestURL			key llRequestURL()\nRequests one HTTP:// url for use by this object\nTriggers an http_server event with results.
llRequestSecureURL			key llRequestSecureURL()\nRequests one HTTPS:// (SSL) url for use by this object\nTriggers an http_server event with results.
llReleaseURL			llReleaseURL(string url)\nReleases the specified URL, it will no longer be usable.
llHTTPResponse			llHTTPResponse(key id, integer status, string body)\nResponds to request id with status and body.
llGetHTTPHeader			string llGetHTTPHeader(key id, string header)\nGet the value for header for request id.
